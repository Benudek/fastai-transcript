1
00:00:00,000 --> 00:00:09,050
Oh

2
00:00:01,459 --> 00:00:11,719
good okay so let me introduce everybody

3
00:00:09,050 --> 00:00:13,820
to everybody else first of all so we're

4
00:00:11,720 --> 00:00:15,500
here at the university of san francisco

5
00:00:13,820 --> 00:00:16,910
learning machine learning or you might

6
00:00:15,500 --> 00:00:19,009
be at home watching this on video

7
00:00:16,910 --> 00:00:21,079
so hey everybody wave here is the

8
00:00:19,010 --> 00:00:23,030
University of San Francisco graduate

9
00:00:21,079 --> 00:00:26,029
students thank you everybody

10
00:00:23,030 --> 00:00:30,050
and wave back from the future and from

11
00:00:26,030 --> 00:00:32,989
home to all the students here if if

12
00:00:30,050 --> 00:00:38,060
you're watching this on youtube please

13
00:00:32,988 --> 00:00:40,849
stop and instead go to course a I and

14
00:00:38,060 --> 00:00:43,520
watch it from there instead that there's

15
00:00:40,850 --> 00:00:45,289
nothing wrong with YouTube but I can't

16
00:00:43,520 --> 00:00:49,070
edit these videos after I've created

17
00:00:45,289 --> 00:00:52,089
them so I need to be able to like if you

18
00:00:49,070 --> 00:00:54,500
updated information about like what

19
00:00:52,090 --> 00:00:57,200
environments to use how the technology

20
00:00:54,500 --> 00:01:00,469
changes and so you need to go here

21
00:00:57,200 --> 00:01:02,000
right so you can also watch the lessons

22
00:01:00,469 --> 00:01:04,489
from here

23
00:01:02,000 --> 00:01:07,849
here's lots of lessons and so forth

24
00:01:04,489 --> 00:01:10,490
right so that's tip number one for the

25
00:01:07,849 --> 00:01:12,739
video tip number two for the video is

26
00:01:10,489 --> 00:01:14,420
because I can't edit them all I can do

27
00:01:12,739 --> 00:01:16,969
is add these things called cards and

28
00:01:14,420 --> 00:01:18,409
cards or little things that appear in

29
00:01:16,969 --> 00:01:20,539
the top corner of the top right hand

30
00:01:18,409 --> 00:01:21,710
corner of the screen so by the time this

31
00:01:20,540 --> 00:01:23,900
video comes out I'm going to put a

32
00:01:21,709 --> 00:01:26,599
little card there right now for you to

33
00:01:23,900 --> 00:01:28,490
click on and try that out unfortunately

34
00:01:26,599 --> 00:01:29,929
they're not easy to notice so keep an

35
00:01:28,489 --> 00:01:33,199
eye out for that because that's going to

36
00:01:29,930 --> 00:01:35,240
be important updates to the video all

37
00:01:33,200 --> 00:01:39,009
right so welcome we're going to be

38
00:01:35,239 --> 00:01:41,298
learning about machine learning today

39
00:01:39,009 --> 00:01:44,359
then so after everybody in the class

40
00:01:41,299 --> 00:01:46,189
here you all have Amazon Web Services

41
00:01:44,359 --> 00:01:51,379
setup so you might want to go ahead and

42
00:01:46,188 --> 00:01:53,508
launch your AWS instance now or go ahead

43
00:01:51,379 --> 00:01:57,920
and create one short Jupiter notebook on

44
00:01:53,509 --> 00:02:01,790
your own computer if you don't have

45
00:01:57,920 --> 00:02:04,670
Jupiter notebook setup then what I

46
00:02:01,790 --> 00:02:08,490
recommend is you go to cresol calm wws

47
00:02:04,670 --> 00:02:09,920
or calm sign in there sign up

48
00:02:08,490 --> 00:02:14,180
[Music]

49
00:02:09,919 --> 00:02:15,949
and you can then turn off enable GPU and

50
00:02:14,180 --> 00:02:18,379
click start Jupiter and you'll have a

51
00:02:15,949 --> 00:02:20,869
Jupiter notebook instantly that costs

52
00:02:18,379 --> 00:02:23,359
you some money it's three cents an hour

53
00:02:20,870 --> 00:02:24,770
okay so if you don't mind spending three

54
00:02:23,360 --> 00:02:26,240
cents an hour to learn machine learning

55
00:02:24,770 --> 00:02:29,540
here's a good way so I'm going to go

56
00:02:26,240 --> 00:02:32,330
ahead and say start Jupiter and so

57
00:02:29,539 --> 00:02:34,849
whatever technique you use there you go

58
00:02:32,330 --> 00:02:37,850
one of the things that you'll find on

59
00:02:34,849 --> 00:02:39,590
the website is links to lots of

60
00:02:37,849 --> 00:02:41,840
information about the costs and benefits

61
00:02:39,590 --> 00:02:43,099
and approaches to setting up lots of

62
00:02:41,840 --> 00:02:46,039
different environments for Jupiter

63
00:02:43,099 --> 00:02:48,349
notebook both the deep learning and for

64
00:02:46,039 --> 00:02:52,250
regular machine learning so check them

65
00:02:48,349 --> 00:02:55,069
out because there's lots of options so

66
00:02:52,250 --> 00:03:01,280
if I then go open a Jupiter and Jupiter

67
00:02:55,069 --> 00:03:05,780
in a new tab Here I am in Kressel or on

68
00:03:01,280 --> 00:03:07,759
AWS or your own computer we use the

69
00:03:05,780 --> 00:03:09,709
Anaconda Python distribution for

70
00:03:07,759 --> 00:03:12,199
basically everything you can install

71
00:03:09,709 --> 00:03:13,670
that yourself and again there's lots of

72
00:03:12,199 --> 00:03:18,399
information on the website about how to

73
00:03:13,669 --> 00:03:21,889
set that up we're also assuming that

74
00:03:18,400 --> 00:03:23,090
either you're using Kressel or there's

75
00:03:21,889 --> 00:03:26,059
something else which I really like

76
00:03:23,090 --> 00:03:27,439
called paper space comm which is another

77
00:03:26,060 --> 00:03:30,170
place you can fire up if you put a

78
00:03:27,439 --> 00:03:34,459
notebook pretty much instantly both of

79
00:03:30,169 --> 00:03:36,738
these have already have all of the fast

80
00:03:34,459 --> 00:03:38,780
AI stuff pre-installed for you so as

81
00:03:36,739 --> 00:03:40,549
soon as you open up cresol or paper

82
00:03:38,780 --> 00:03:43,489
space assuming you chose the paper space

83
00:03:40,549 --> 00:03:47,420
fast AI template you'll see that there's

84
00:03:43,489 --> 00:03:50,420
a fast AI folder okay if you are using

85
00:03:47,419 --> 00:03:54,429
your own computer or AWS you'll need to

86
00:03:50,419 --> 00:03:58,039
go to our github repo fast AI fast AI

87
00:03:54,430 --> 00:04:01,099
and clone it okay and then you'll need

88
00:03:58,039 --> 00:04:03,379
to do a condor and update to install the

89
00:04:01,099 --> 00:04:05,389
libraries and again that's all

90
00:04:03,379 --> 00:04:07,129
information we put on the website and

91
00:04:05,389 --> 00:04:08,629
we've got some previous workshop videos

92
00:04:07,129 --> 00:04:12,259
to help you through all of those deaths

93
00:04:08,629 --> 00:04:17,409
so for this class I'm assuming that you

94
00:04:12,259 --> 00:04:20,750
have a Jupiter notebook running okay

95
00:04:17,410 --> 00:04:21,919
so here we are in the in the Jupiter

96
00:04:20,750 --> 00:04:25,399
notebook

97
00:04:21,918 --> 00:04:27,049
and if I click on fast AI that's what

98
00:04:25,399 --> 00:04:32,089
you get if you get clone or if you're in

99
00:04:27,050 --> 00:04:36,470
Chris all you can see our repo here all

100
00:04:32,089 --> 00:04:40,879
of our lessons are inside the courses

101
00:04:36,470 --> 00:04:45,500
folder and the machine learning part one

102
00:04:40,879 --> 00:04:47,659
is in the ml one folder if you're ever

103
00:04:45,500 --> 00:04:51,019
looking at my screen and wondering where

104
00:04:47,660 --> 00:04:55,180
are you look up here and you'll see that

105
00:04:51,019 --> 00:04:58,639
tells you the path fast AI forces ml 1

106
00:04:55,180 --> 00:05:01,519
and today we're going to be looking at

107
00:04:58,639 --> 00:05:04,840
less than one random forests so here is

108
00:05:01,519 --> 00:05:04,839
lesson 1 RF

109
00:05:06,699 --> 00:05:08,759
you

110
00:05:10,220 --> 00:05:12,280
you

111
00:05:15,439 --> 00:05:20,699
so there's a couple of different ways

112
00:05:17,519 --> 00:05:23,728
you can do this both here in person or

113
00:05:20,699 --> 00:05:26,819
on the video you can either attempt to

114
00:05:23,728 --> 00:05:28,889
follow along as you watch or you can

115
00:05:26,819 --> 00:05:33,918
just watch and then follow along later

116
00:05:28,889 --> 00:05:37,639
with the video it's up to you I would

117
00:05:33,918 --> 00:05:41,849
maybe have a loose recommendation to say

118
00:05:37,639 --> 00:05:45,660
to watch now and follow along with the

119
00:05:41,850 --> 00:05:47,699
video later just because it's quite hard

120
00:05:45,660 --> 00:05:49,740
to motor tasks and if you're working on

121
00:05:47,699 --> 00:05:52,080
something you might miss a key piece of

122
00:05:49,740 --> 00:05:55,348
information which you're welcome to ask

123
00:05:52,079 --> 00:05:57,240
about okay but if you follow along with

124
00:05:55,348 --> 00:06:01,199
the video afterwards then you can pause

125
00:05:57,240 --> 00:06:04,250
stop experiment and so forth but anyway

126
00:06:01,199 --> 00:06:05,910
you can choose either way I'm going to

127
00:06:04,250 --> 00:06:08,759
go of you

128
00:06:05,910 --> 00:06:12,270
Topol header view toggle tool bar and

129
00:06:08,759 --> 00:06:19,288
then full screen it so to get a bit more

130
00:06:12,269 --> 00:06:21,948
space so the basic approach we're going

131
00:06:19,288 --> 00:06:24,750
to be teaching here taking here is to

132
00:06:21,949 --> 00:06:29,310
get straight into code start building

133
00:06:24,750 --> 00:06:32,069
models not to look at theory we've got

134
00:06:29,310 --> 00:06:33,538
to get to other theory okay but at the

135
00:06:32,069 --> 00:06:35,129
point where you deeply understand what

136
00:06:33,538 --> 00:06:39,569
it's for and at the point that you're

137
00:06:35,129 --> 00:06:41,158
able to be an effective practitioner so

138
00:06:39,569 --> 00:06:44,339
my hope is that you're going to spend

139
00:06:41,158 --> 00:06:46,228
your time focusing on experimenting so

140
00:06:44,339 --> 00:06:48,469
if you take these notebooks and try

141
00:06:46,228 --> 00:06:51,508
different variations of what I show you

142
00:06:48,470 --> 00:06:54,419
try it with your own data sets the more

143
00:06:51,509 --> 00:06:57,090
coding you can do the better the more

144
00:06:54,418 --> 00:06:58,560
you'll learn ok don't in you know my

145
00:06:57,089 --> 00:07:00,179
suggestion or at least and all of my

146
00:06:58,560 --> 00:07:03,180
students have told me the ones who have

147
00:07:00,180 --> 00:07:06,030
gone away and spent time studying books

148
00:07:03,180 --> 00:07:08,430
of theory rather than coding found that

149
00:07:06,029 --> 00:07:09,658
they learnt less machine learning and

150
00:07:08,430 --> 00:07:15,449
that they often tell me they wish that's

151
00:07:09,658 --> 00:07:16,829
one more time coding the stuff that

152
00:07:15,449 --> 00:07:18,840
we're showing in this course a lot of

153
00:07:16,829 --> 00:07:21,689
it's never been shown before this is not

154
00:07:18,839 --> 00:07:24,478
a summary of other people's research

155
00:07:21,689 --> 00:07:25,769
this is more a summary of 25 years of

156
00:07:24,478 --> 00:07:26,889
work that I've been doing in machine

157
00:07:25,769 --> 00:07:28,750
learning

158
00:07:26,889 --> 00:07:30,729
so a lot of this is going to be shown

159
00:07:28,750 --> 00:07:32,079
for the first time and so that's kind of

160
00:07:30,730 --> 00:07:33,939
cool because if you want to write a blog

161
00:07:32,079 --> 00:07:36,009
post about something that you learn here

162
00:07:33,939 --> 00:07:37,959
you might be building something but a

163
00:07:36,009 --> 00:07:40,569
lot of people find super useful all

164
00:07:37,959 --> 00:07:42,159
right so there's a great opportunity to

165
00:07:40,569 --> 00:07:43,509
practice your technical writing and

166
00:07:42,160 --> 00:07:43,990
here's some examples of good technical

167
00:07:43,509 --> 00:07:46,300
writing

168
00:07:43,990 --> 00:07:48,790
okay page by showing people stuff which

169
00:07:46,300 --> 00:07:50,259
you've it's not like hey I just learnt

170
00:07:48,790 --> 00:07:52,090
this thing I bet you all know it often

171
00:07:50,259 --> 00:07:53,500
it'll be I just want this thing and I'm

172
00:07:52,089 --> 00:07:56,319
going to tell you about it and other

173
00:07:53,500 --> 00:07:59,350
people haven't seen it in fact this is

174
00:07:56,319 --> 00:08:01,240
the first course ever that's been built

175
00:07:59,350 --> 00:08:03,040
on top of the first AI library so even

176
00:08:01,240 --> 00:08:07,660
just stuff in the library is going to be

177
00:08:03,040 --> 00:08:09,189
new to like everybody okay so when we

178
00:08:07,660 --> 00:08:13,180
use a droopin a notebook or anything

179
00:08:09,189 --> 00:08:15,719
else in python we have to import the the

180
00:08:13,180 --> 00:08:17,949
libraries that we're going to use

181
00:08:15,720 --> 00:08:20,560
something that's quite convenient as if

182
00:08:17,949 --> 00:08:22,719
you use these to auto reload commands at

183
00:08:20,560 --> 00:08:25,120
the top of your notebook you can go in

184
00:08:22,720 --> 00:08:27,460
and edit the source code of the modules

185
00:08:25,120 --> 00:08:29,530
and your notebook will automatically

186
00:08:27,459 --> 00:08:31,029
update with those new modules you won't

187
00:08:29,529 --> 00:08:34,240
have to like restart anything so that's

188
00:08:31,029 --> 00:08:36,309
super handy then to show your plots

189
00:08:34,240 --> 00:08:38,860
inside the notebook you're wanting that

190
00:08:36,309 --> 00:08:44,169
plot in line so these three lines appear

191
00:08:38,860 --> 00:08:46,090
at the top of all of my notebooks you'll

192
00:08:44,169 --> 00:08:48,339
notice when I import the libraries that

193
00:08:46,090 --> 00:08:51,250
for anybody here who is a experienced

194
00:08:48,340 --> 00:08:53,019
Python programmer I am doing something

195
00:08:51,250 --> 00:08:56,110
that would be widely considered very

196
00:08:53,019 --> 00:08:57,549
inappropriate I'm importing star okay

197
00:08:56,110 --> 00:08:59,110
generally speaking in software

198
00:08:57,549 --> 00:09:01,000
engineering we're taught to like it

199
00:08:59,110 --> 00:09:03,840
specifically figure out what we need and

200
00:09:01,000 --> 00:09:03,840
import those things

201
00:09:05,080 --> 00:09:09,430
the more experienced you are as Python

202
00:09:07,480 --> 00:09:11,470
programmer the more extremely offensive

203
00:09:09,429 --> 00:09:13,149
practices you're going to see me use for

204
00:09:11,470 --> 00:09:16,000
example I don't follow what's called pap

205
00:09:13,149 --> 00:09:19,990
8 which is the normal style method style

206
00:09:16,000 --> 00:09:23,169
of code used in Python so I'm going to

207
00:09:19,990 --> 00:09:24,940
mention a couple of things first is go

208
00:09:23,169 --> 00:09:25,569
along with it for a while don't judge me

209
00:09:24,940 --> 00:09:27,100
just yet

210
00:09:25,570 --> 00:09:29,769
right there's reasons that I do these

211
00:09:27,100 --> 00:09:31,720
things and if it really bothers you then

212
00:09:29,769 --> 00:09:35,110
feel free to to change it right but the

213
00:09:31,720 --> 00:09:37,300
basic idea is data science is not

214
00:09:35,110 --> 00:09:38,980
software engineering right there's a lot

215
00:09:37,299 --> 00:09:41,859
of overlap you know we're using the same

216
00:09:38,980 --> 00:09:45,519
languages and in the end these things or

217
00:09:41,860 --> 00:09:47,289
may become software engineering projects

218
00:09:45,519 --> 00:09:49,750
but what we're doing right now is we're

219
00:09:47,289 --> 00:09:52,689
prototyping models and prototyping

220
00:09:49,750 --> 00:09:54,730
models has a very different set of best

221
00:09:52,690 --> 00:09:56,589
practices that are taught basically

222
00:09:54,730 --> 00:09:59,409
nowhere right they're not really even

223
00:09:56,589 --> 00:10:01,300
really written down but the key is to be

224
00:09:59,409 --> 00:10:04,289
able to do things very interactively and

225
00:10:01,299 --> 00:10:07,990
very iteratively right so for example

226
00:10:04,289 --> 00:10:09,909
from library import star means you don't

227
00:10:07,990 --> 00:10:11,049
have to figure out ahead of time what

228
00:10:09,909 --> 00:10:14,769
you're going to need from that library

229
00:10:11,049 --> 00:10:16,000
it's it's all there okay also because

230
00:10:14,769 --> 00:10:20,069
we're in this wonderful interactive

231
00:10:16,000 --> 00:10:22,839
Jupiter environment it lets us

232
00:10:20,070 --> 00:10:27,240
understand what's in the libraries

233
00:10:22,839 --> 00:10:30,760
really well so for example later on I'm

234
00:10:27,240 --> 00:10:32,860
using a function called display right so

235
00:10:30,759 --> 00:10:35,319
an obvious question is like well what is

236
00:10:32,860 --> 00:10:38,350
display so you can just type the name of

237
00:10:35,320 --> 00:10:41,680
a function and press shift enter member

238
00:10:38,350 --> 00:10:43,720
shift enter is is to run a cell and it

239
00:10:41,679 --> 00:10:45,309
will tell you where it's from right so

240
00:10:43,720 --> 00:10:47,949
anytime you see a function you are not

241
00:10:45,309 --> 00:10:50,198
familiar with you can find out where

242
00:10:47,948 --> 00:10:53,948
it's wrong and then if you want to find

243
00:10:50,198 --> 00:10:59,708
out what it does put a question mark at

244
00:10:53,948 --> 00:11:02,620
the start okay and here you have the

245
00:10:59,708 --> 00:11:04,778
documentation and then particularly

246
00:11:02,620 --> 00:11:06,899
helpful for the faster I library so the

247
00:11:04,778 --> 00:11:09,820
faster I library I try to make as many

248
00:11:06,899 --> 00:11:11,350
functions as possible be like no more

249
00:11:09,820 --> 00:11:14,290
than about five lines of code it's just

250
00:11:11,350 --> 00:11:15,879
going to be really easy to read right if

251
00:11:14,289 --> 00:11:17,740
you put a second question mark at the

252
00:11:15,879 --> 00:11:21,590
star

253
00:11:17,740 --> 00:11:26,690
it shows you the source code of the

254
00:11:21,590 --> 00:11:28,879
function right so all the documentation

255
00:11:26,690 --> 00:11:31,610
plus the source code so you can see like

256
00:11:28,879 --> 00:11:32,990
nothing has to be mysterious and we're

257
00:11:31,610 --> 00:11:35,750
going to be using the other library

258
00:11:32,990 --> 00:11:37,580
we'll use a lot is scikit-learn which is

259
00:11:35,750 --> 00:11:40,159
kind of implements a lot of machine

260
00:11:37,580 --> 00:11:43,250
learning stuff in Python the

261
00:11:40,159 --> 00:11:45,469
scikit-learn source code is often pretty

262
00:11:43,250 --> 00:11:46,730
readable and so very often if I want to

263
00:11:45,470 --> 00:11:48,440
really understand something

264
00:11:46,730 --> 00:11:50,000
I'll just go question mark question mark

265
00:11:48,440 --> 00:11:51,470
and the name of the scikit-learn

266
00:11:50,000 --> 00:11:55,220
function I'm typing and I'll just go

267
00:11:51,470 --> 00:11:57,920
ahead and read the source code as I say

268
00:11:55,220 --> 00:12:00,200
the first day I library in particular is

269
00:11:57,919 --> 00:12:01,279
designed to have source code that's very

270
00:12:00,200 --> 00:12:07,610
easy to read and we're going to be

271
00:12:01,279 --> 00:12:09,049
reading it a lot okay all right so today

272
00:12:07,610 --> 00:12:10,940
we're going to be working on a cattle

273
00:12:09,049 --> 00:12:14,389
competition called Blue Book for

274
00:12:10,940 --> 00:12:17,380
bulldozers so the first thing we need is

275
00:12:14,389 --> 00:12:20,379
to get that data so if you go Cargill

276
00:12:17,379 --> 00:12:20,379
bulldozers

277
00:12:21,379 --> 00:12:29,139
then you can find it so cackle

278
00:12:26,149 --> 00:12:31,909
competitions allow you to download a

279
00:12:29,139 --> 00:12:33,528
real-world data set that's somebody a

280
00:12:31,909 --> 00:12:35,988
real problem that somebody's trying to

281
00:12:33,528 --> 00:12:38,119
solve and solve it according to a

282
00:12:35,989 --> 00:12:39,769
specification that that actual person

283
00:12:38,119 --> 00:12:42,259
with that actual problem decided would

284
00:12:39,769 --> 00:12:45,918
be actually helpful to them right so

285
00:12:42,259 --> 00:12:48,619
these are pretty authentic experiences

286
00:12:45,918 --> 00:12:50,149
for applied machine learning now of

287
00:12:48,619 --> 00:12:52,249
course you're missing all the bit that

288
00:12:50,149 --> 00:12:54,828
went before which was why did this

289
00:12:52,249 --> 00:12:56,538
company to start up the side that

290
00:12:54,828 --> 00:12:59,088
predicting the option sale price of

291
00:12:56,538 --> 00:13:01,399
bulldozers was important where did they

292
00:12:59,089 --> 00:13:03,889
get the data from how did they clean the

293
00:13:01,399 --> 00:13:06,499
data and so forth okay and that's all

294
00:13:03,889 --> 00:13:08,568
important stuff as well but the focus of

295
00:13:06,499 --> 00:13:10,220
this course is really on what happens

296
00:13:08,568 --> 00:13:13,219
next which is like how do you actually

297
00:13:10,220 --> 00:13:14,599
build the model one of the great things

298
00:13:13,220 --> 00:13:16,369
about you working on Cargill

299
00:13:14,599 --> 00:13:18,739
competitions whether they be running now

300
00:13:16,369 --> 00:13:21,259
or whether they be old ones is that you

301
00:13:18,739 --> 00:13:23,119
can submit yours to the leaderboard even

302
00:13:21,259 --> 00:13:24,499
old closed competitions you can submit

303
00:13:23,119 --> 00:13:26,538
to the leaderboard and find out how

304
00:13:24,499 --> 00:13:27,979
would you have gone right and there's

305
00:13:26,538 --> 00:13:32,208
really no other way in the world of

306
00:13:27,979 --> 00:13:34,429
knowing whether you're competent at this

307
00:13:32,208 --> 00:13:36,528
kind of data in this kind of model than

308
00:13:34,428 --> 00:13:39,350
doing that right because otherwise if

309
00:13:36,528 --> 00:13:41,269
your accuracy is really bad is it

310
00:13:39,350 --> 00:13:44,239
because this is just very hard like it's

311
00:13:41,269 --> 00:13:46,459
just not possible then the data is so

312
00:13:44,239 --> 00:13:49,908
noisy you can't do better or is it

313
00:13:46,458 --> 00:13:54,038
actually that it's an easy data set and

314
00:13:49,908 --> 00:13:56,989
you've made a mistake and like when you

315
00:13:54,038 --> 00:13:58,668
finish this course and apply this to

316
00:13:56,989 --> 00:13:59,989
your own projects this is going to be

317
00:13:58,668 --> 00:14:02,720
something you're going to find very hard

318
00:13:59,989 --> 00:14:05,809
and there isn't a simple solution to it

319
00:14:02,720 --> 00:14:07,928
which is you're now using something that

320
00:14:05,808 --> 00:14:11,208
hasn't been on cog or your own data set

321
00:14:07,928 --> 00:14:12,168
do you have a good enough answer or not

322
00:14:11,208 --> 00:14:14,058
okay

323
00:14:12,168 --> 00:14:18,619
so we'll talk about that more during the

324
00:14:14,058 --> 00:14:20,808
course and in the end we just have to

325
00:14:18,619 --> 00:14:23,418
know that we have good effective

326
00:14:20,808 --> 00:14:26,899
techniques to reliably building baseline

327
00:14:23,418 --> 00:14:28,249
models otherwise yeah there's really no

328
00:14:26,899 --> 00:14:30,480
way to know there's no way other than

329
00:14:28,249 --> 00:14:32,610
creating a cackle competition

330
00:14:30,480 --> 00:14:34,350
or getting you know a hundred top data

331
00:14:32,610 --> 00:14:36,320
scientists to work at your problem to

332
00:14:34,350 --> 00:14:39,990
really know what's possible

333
00:14:36,320 --> 00:14:42,570
SoCal competitions are fantastic for for

334
00:14:39,990 --> 00:14:44,700
learning and as I've said many times

335
00:14:42,570 --> 00:14:46,230
I've learned more from kept from

336
00:14:44,700 --> 00:14:48,690
competing in cackled competitions and

337
00:14:46,230 --> 00:14:50,940
everything else I've done in my life

338
00:14:48,690 --> 00:14:53,850
so to compete in the caracal competition

339
00:14:50,940 --> 00:14:55,740
you need the data this one's a an old

340
00:14:53,850 --> 00:15:00,300
competition so it's not running now but

341
00:14:55,740 --> 00:15:01,889
we can still access everything so we

342
00:15:00,299 --> 00:15:05,279
first of all want to understand what the

343
00:15:01,889 --> 00:15:06,840
goal is and I suggest that you read this

344
00:15:05,279 --> 00:15:08,909
later but basically we're to try and

345
00:15:06,840 --> 00:15:11,850
predict the sale price of heavy

346
00:15:08,909 --> 00:15:14,549
equipment and one of the nice things

347
00:15:11,850 --> 00:15:16,590
about this competition is that if you

348
00:15:14,549 --> 00:15:19,259
are like me you probably don't know very

349
00:15:16,590 --> 00:15:21,149
much about heavy heavy industrial

350
00:15:19,259 --> 00:15:22,710
equipment options right

351
00:15:21,149 --> 00:15:24,990
I actually know more than I used to

352
00:15:22,710 --> 00:15:27,120
because my toddler loves building

353
00:15:24,990 --> 00:15:29,250
equipment so we actually like watched

354
00:15:27,120 --> 00:15:32,070
youtube videos about front end loaders

355
00:15:29,250 --> 00:15:37,259
and forklifts but you know two months

356
00:15:32,070 --> 00:15:39,540
ago I was you know a real layman so one

357
00:15:37,259 --> 00:15:41,129
of the nice things is that machine

358
00:15:39,539 --> 00:15:43,409
learning should help us understand a

359
00:15:41,129 --> 00:15:43,860
data set not just make predictions about

360
00:15:43,409 --> 00:15:46,019
it

361
00:15:43,860 --> 00:15:47,879
so by picking an area which we're not

362
00:15:46,019 --> 00:15:49,980
familiar with it's a good test of

363
00:15:47,879 --> 00:15:52,259
whether we can build an understanding

364
00:15:49,980 --> 00:15:54,539
right because otherwise what can happen

365
00:15:52,259 --> 00:15:56,519
is that your intuition about the data

366
00:15:54,539 --> 00:15:58,349
can make it very difficult for you to be

367
00:15:56,519 --> 00:16:01,620
open-minded enough to see what does the

368
00:15:58,350 --> 00:16:04,019
data really say it's easy enough to

369
00:16:01,620 --> 00:16:05,970
download the computer sorry to download

370
00:16:04,019 --> 00:16:09,259
the data to your computer you just have

371
00:16:05,970 --> 00:16:15,000
to click on the data set so here is

372
00:16:09,259 --> 00:16:16,230
train zip and click download right and

373
00:16:15,000 --> 00:16:16,980
so you can go ahead and do that if

374
00:16:16,230 --> 00:16:21,210
you're running on your own computer

375
00:16:16,980 --> 00:16:23,940
right now if you're running on AWS it's

376
00:16:21,210 --> 00:16:25,710
a little bit harder right because unless

377
00:16:23,940 --> 00:16:28,350
you're familiar with textmode browsers

378
00:16:25,710 --> 00:16:31,710
like a links or links it's quite tricky

379
00:16:28,350 --> 00:16:34,080
to get the data set to cable so a couple

380
00:16:31,710 --> 00:16:38,670
of options one is you could download it

381
00:16:34,080 --> 00:16:41,370
to your computer and then SCP it to AWS

382
00:16:38,669 --> 00:16:42,569
so SCP works just like SSH but it copies

383
00:16:41,370 --> 00:16:44,429
data rather

384
00:16:42,570 --> 00:16:46,320
logging in I'll show you a trick though

385
00:16:44,429 --> 00:16:50,489
that I really like and it relies on

386
00:16:46,320 --> 00:16:52,680
using Firefox for some reason chrome

387
00:16:50,490 --> 00:16:59,909
doesn't work correctly with cable for

388
00:16:52,679 --> 00:17:01,939
this so if I go on Firefox to the

389
00:16:59,909 --> 00:17:04,839
website

390
00:17:01,940 --> 00:17:04,840
eventually

391
00:17:05,130 --> 00:17:07,190
you

392
00:17:08,349 --> 00:17:12,009
and what we're going to do is we're

393
00:17:10,298 --> 00:17:16,000
going to use something called the

394
00:17:12,009 --> 00:17:18,548
JavaScript console so every web browser

395
00:17:16,000 --> 00:17:21,699
comes with a set of tools for web

396
00:17:18,548 --> 00:17:30,670
developers to help them see what's going

397
00:17:21,699 --> 00:17:34,900
on and you can hit 0 3 here

398
00:17:30,670 --> 00:17:39,070
developer control-shift a okay so you

399
00:17:34,900 --> 00:17:42,700
can hit ctrl shift I to bring up this

400
00:17:39,069 --> 00:17:47,439
this web developer tools and one of the

401
00:17:42,700 --> 00:17:52,299
tabs is network okay and so then if I

402
00:17:47,440 --> 00:17:54,840
click on train zip and I click on

403
00:17:52,299 --> 00:17:54,839
download

404
00:17:55,619 --> 00:17:59,308
okay and I'm not even going to download

405
00:17:57,089 --> 00:18:01,798
on let's gonna say cancel but you'll see

406
00:17:59,308 --> 00:18:03,599
down here it's shown me all of the

407
00:18:01,798 --> 00:18:06,089
network connections that were just

408
00:18:03,599 --> 00:18:08,308
initiated right and so here's one which

409
00:18:06,089 --> 00:18:10,949
is downloading a zip file from storage

410
00:18:08,308 --> 00:18:13,769
Google API is calm blah blah blah that's

411
00:18:10,950 --> 00:18:15,210
probably what I want now that looks good

412
00:18:13,769 --> 00:18:19,308
so what you can do is you can

413
00:18:15,210 --> 00:18:19,308
right-click on that and say copy

414
00:18:19,359 --> 00:18:27,309
copy as curl so curl is a UNIX command

415
00:18:23,589 --> 00:18:30,490
like W get that downloads stuff right so

416
00:18:27,309 --> 00:18:33,069
if I go copy as curl that's going to

417
00:18:30,490 --> 00:18:35,289
create a command that has all of my

418
00:18:33,069 --> 00:18:37,960
cookies headers everything in it

419
00:18:35,289 --> 00:18:44,259
necessary to download this authenticated

420
00:18:37,960 --> 00:18:48,190
data set so if I now go into my server

421
00:18:44,259 --> 00:18:56,920
right and if I paste that you can see a

422
00:18:48,190 --> 00:18:59,019
really really long curl command one

423
00:18:56,920 --> 00:19:01,800
thing I notice is that at least recent

424
00:18:59,019 --> 00:19:04,900
versions have started adding this - -

425
00:19:01,799 --> 00:19:06,430
2.0 thing to the command that doesn't

426
00:19:04,900 --> 00:19:10,590
seem to work with all versions of curl

427
00:19:06,430 --> 00:19:18,580
so something you might want to do is to

428
00:19:10,589 --> 00:19:24,099
oopsy-daisy a PE is to pop that into an

429
00:19:18,579 --> 00:19:28,299
editor find that to get rid of it and

430
00:19:24,099 --> 00:19:30,779
then use that instead okay now one thing

431
00:19:28,299 --> 00:19:35,230
to be very careful about by default curl

432
00:19:30,779 --> 00:19:37,599
downloads the file and displays it in

433
00:19:35,230 --> 00:19:39,519
your terminal so if I try to display

434
00:19:37,599 --> 00:19:41,649
this it's going to display gigabytes of

435
00:19:39,519 --> 00:19:44,519
binary data in my terminal and crash it

436
00:19:41,650 --> 00:19:47,019
okay so to say that I want to output it

437
00:19:44,519 --> 00:19:47,859
using some different file name I always

438
00:19:47,019 --> 00:19:50,799
type - o

439
00:19:47,859 --> 00:19:55,990
for output file name and then the name

440
00:19:50,799 --> 00:19:59,889
of the file bulldozers dot and make sure

441
00:19:55,990 --> 00:20:04,710
you give it a suitable a suitable

442
00:19:59,890 --> 00:20:10,830
extension so in this case the file was

443
00:20:04,710 --> 00:20:14,680
train's it okay so bulldozers dot zip

444
00:20:10,829 --> 00:20:20,189
there it is okay and so there it all is

445
00:20:14,680 --> 00:20:20,190
so I could make directory bulldozers

446
00:20:22,970 --> 00:20:31,890
and I couldn't move my zip file into

447
00:20:25,529 --> 00:20:35,048
there oops wrong way around

448
00:20:31,890 --> 00:20:35,049
[Music]

449
00:20:35,089 --> 00:20:41,389
yes thank you

450
00:20:41,619 --> 00:20:43,649
ah

451
00:20:45,819 --> 00:20:47,879
you

452
00:20:48,250 --> 00:20:50,309
you

453
00:20:58,200 --> 00:21:04,538
okay and then you if you don't have

454
00:21:01,210 --> 00:21:08,370
unzip install you may need to sudo apt

455
00:21:04,538 --> 00:21:11,890
install unzip or if then you're on a Mac

456
00:21:08,369 --> 00:21:13,389
that would be brew install unzip if brew

457
00:21:11,890 --> 00:21:14,919
doesn't work you haven't got homebrew

458
00:21:13,390 --> 00:21:19,299
installed so make sure you install it

459
00:21:14,919 --> 00:21:23,890
and then unzip okay and so there the

460
00:21:19,298 --> 00:21:29,980
basic steps one nice thing is that if

461
00:21:23,890 --> 00:21:31,990
you're using Kressel most of the data

462
00:21:29,980 --> 00:21:35,558
sets should already be pre-installed for

463
00:21:31,990 --> 00:21:40,390
you so what I can do here is I can say

464
00:21:35,558 --> 00:21:41,740
open a new tab here's a cool trick in

465
00:21:40,390 --> 00:21:44,830
Jupiter you can actually say new

466
00:21:41,740 --> 00:21:47,769
terminal and you can actually get a

467
00:21:44,829 --> 00:21:51,220
web-based terminal and so you'll find

468
00:21:47,769 --> 00:21:56,288
one cresol there's a slash data sets

469
00:21:51,220 --> 00:21:58,900
folder slash data sets flash Cagle slash

470
00:21:56,288 --> 00:22:00,640
data set slash birthday I often the

471
00:21:58,900 --> 00:22:05,380
things you need are going to be in one

472
00:22:00,640 --> 00:22:07,659
of those places okay so assuming that we

473
00:22:05,380 --> 00:22:09,159
don't have it already downloaded in

474
00:22:07,659 --> 00:22:11,169
paper actually paper space should have

475
00:22:09,159 --> 00:22:13,150
most of them as well then we would need

476
00:22:11,169 --> 00:22:17,559
to go to far say I let's go into the

477
00:22:13,150 --> 00:22:19,900
courses machine learning folder and what

478
00:22:17,558 --> 00:22:22,119
I tend to do is I tend to put all of my

479
00:22:19,900 --> 00:22:26,019
data for a course into a folder called

480
00:22:22,119 --> 00:22:27,519
data you'll find that if you try and if

481
00:22:26,019 --> 00:22:28,960
you're using what we using get right

482
00:22:27,519 --> 00:22:30,759
you'll find that that doesn't get added

483
00:22:28,960 --> 00:22:34,900
to get because it's in the get ignore

484
00:22:30,759 --> 00:22:36,400
right so so don't worry about creating

485
00:22:34,900 --> 00:22:38,288
the data folder it's not going to screw

486
00:22:36,400 --> 00:22:40,600
anything up so I generally make a folder

487
00:22:38,288 --> 00:22:43,450
called data and then I tend to create

488
00:22:40,599 --> 00:22:51,699
folders for everything I need there so

489
00:22:43,450 --> 00:22:53,919
in this case I'll make bulldozes CD and

490
00:22:51,700 --> 00:22:55,910
remember the last word of the last

491
00:22:53,919 --> 00:22:57,750
command is exclamation mark dollar

492
00:22:55,910 --> 00:22:59,940
[Music]

493
00:22:57,750 --> 00:23:00,829
I'll go ahead and grab that kill command

494
00:22:59,940 --> 00:23:03,930
again

495
00:23:00,829 --> 00:23:03,929
[Music]

496
00:23:14,569 --> 00:23:24,419
you

497
00:23:16,569 --> 00:23:31,389
okay and zip bulldozers there we go okay

498
00:23:24,420 --> 00:23:33,640
so you can now see I generally have like

499
00:23:31,390 --> 00:23:35,500
anything that would change that might

500
00:23:33,640 --> 00:23:37,330
change from person to person I kind of

501
00:23:35,500 --> 00:23:38,589
put in a constant so here I just defined

502
00:23:37,329 --> 00:23:40,480
something called path but if you've used

503
00:23:38,589 --> 00:23:43,509
the same path I just did just got to go

504
00:23:40,480 --> 00:23:45,730
ahead and run that and let's go ahead

505
00:23:43,509 --> 00:23:47,950
and keep moving along so we've now got

506
00:23:45,730 --> 00:23:55,529
all of our libraries imported and we've

507
00:23:47,950 --> 00:23:57,640
said the path to the data you can run

508
00:23:55,529 --> 00:23:59,230
shell commands from within

509
00:23:57,640 --> 00:24:01,060
Tripta notebook by using an exclamation

510
00:23:59,230 --> 00:24:04,809
mark so if I want to check what's inside

511
00:24:01,059 --> 00:24:07,480
that path I can go LS data slash

512
00:24:04,809 --> 00:24:10,089
bulldozers okay and you can see that

513
00:24:07,480 --> 00:24:12,490
works or you can even use Python

514
00:24:10,089 --> 00:24:14,289
variables if you use a Python variable

515
00:24:12,490 --> 00:24:19,690
inside a Jupiter show command you have

516
00:24:14,289 --> 00:24:21,309
to put it in Curly's okay so that makes

517
00:24:19,690 --> 00:24:23,830
me feel good that my path is pointing at

518
00:24:21,309 --> 00:24:26,710
the right place if you say LS curly

519
00:24:23,829 --> 00:24:28,029
capital's path and you get nothing at

520
00:24:26,710 --> 00:24:37,840
all then you're pointing at the wrong

521
00:24:28,029 --> 00:24:39,460
spot yes this up here usually yeah so

522
00:24:37,839 --> 00:24:41,019
the curly brackets refer to the fact

523
00:24:39,460 --> 00:24:44,049
that I put an exclamation mark at the

524
00:24:41,019 --> 00:24:46,960
front which means the rest of this is

525
00:24:44,049 --> 00:24:49,690
not a Python command

526
00:24:46,960 --> 00:24:51,880
it's a bashed command and bash doesn't

527
00:24:49,690 --> 00:24:54,789
know about capital path because capital

528
00:24:51,880 --> 00:24:57,700
Park is part of them - so this is a

529
00:24:54,789 --> 00:25:00,460
special Jupiter thing which says expand

530
00:24:57,700 --> 00:25:02,970
this Python thing please before you pass

531
00:25:00,460 --> 00:25:02,970
it to the show

532
00:25:03,079 --> 00:25:19,069
question thank you so the goal here is

533
00:25:15,618 --> 00:25:21,558
to use the training set which contains

534
00:25:19,069 --> 00:25:26,298
data through the end of 2011 to predict

535
00:25:21,558 --> 00:25:28,220
the sale price of bulldozers and so the

536
00:25:26,298 --> 00:25:31,398
main thing to start with then is of

537
00:25:28,220 --> 00:25:35,509
course to look at the data now the data

538
00:25:31,398 --> 00:25:37,459
is in CSV format right so one easy way

539
00:25:35,509 --> 00:25:39,499
to look at the data would be to use

540
00:25:37,460 --> 00:25:43,519
shell command head to look at the first

541
00:25:39,499 --> 00:25:45,889
two lines paired bulldozers and even

542
00:25:43,519 --> 00:25:48,739
tab-completion works here Jupiter does

543
00:25:45,888 --> 00:25:52,368
everything right so here's the first few

544
00:25:48,739 --> 00:25:53,808
five lines okay so there's like a bunch

545
00:25:52,368 --> 00:25:55,579
of column headers and then there's a

546
00:25:53,808 --> 00:25:57,589
bunch of data so that's pretty hard to

547
00:25:55,579 --> 00:26:00,288
look at so what we want to do is take

548
00:25:57,589 --> 00:26:04,608
this and read it into a nice tabular

549
00:26:00,288 --> 00:26:05,599
format okay so just Terrance putting

550
00:26:04,608 --> 00:26:07,638
classes on mean I should make this

551
00:26:05,599 --> 00:26:13,398
bigger or is it okay is this big enough

552
00:26:07,638 --> 00:26:16,189
font size okay so this kind of data

553
00:26:13,398 --> 00:26:18,018
where you've got columns representing a

554
00:26:16,190 --> 00:26:20,450
wide range of different types of things

555
00:26:18,019 --> 00:26:25,999
such as an identifier of value a

556
00:26:20,450 --> 00:26:28,548
currency a date a size I refer to this

557
00:26:25,999 --> 00:26:30,200
as structured data now I say I refer to

558
00:26:28,548 --> 00:26:32,690
this as structured data because like

559
00:26:30,200 --> 00:26:34,100
there have been many arguments in the

560
00:26:32,690 --> 00:26:37,278
machine learning community on Twitter

561
00:26:34,099 --> 00:26:39,528
about what is structured data weirdly

562
00:26:37,278 --> 00:26:42,440
enough this is like the most important

563
00:26:39,528 --> 00:26:45,589
type of distinction is between data that

564
00:26:42,440 --> 00:26:47,659
looks like this and data like images

565
00:26:45,589 --> 00:26:49,819
where every column is of the same type

566
00:26:47,659 --> 00:26:52,309
like that's the most important

567
00:26:49,819 --> 00:26:55,428
distinction in machine learning yet we

568
00:26:52,308 --> 00:26:57,378
don't have standard accepted terms so

569
00:26:55,429 --> 00:26:59,899
I'm going to use the term structured and

570
00:26:57,378 --> 00:27:00,798
unstructured but note that other people

571
00:26:59,898 --> 00:27:04,128
you talk to

572
00:27:00,798 --> 00:27:05,538
particularly in NLP and NLP people use

573
00:27:04,128 --> 00:27:08,689
structured to mean something totally

574
00:27:05,538 --> 00:27:09,528
different right so when I refer to

575
00:27:08,690 --> 00:27:11,450
structured data

576
00:27:09,528 --> 00:27:13,778
I mean columns of data that can have

577
00:27:11,450 --> 00:27:16,640
varying different types of data in them

578
00:27:13,778 --> 00:27:17,960
by far the most important tool

579
00:27:16,640 --> 00:27:21,380
in Python if you're working with

580
00:27:17,960 --> 00:27:23,210
structure data is pandas pandas is so

581
00:27:21,380 --> 00:27:24,860
important that it's one of the few

582
00:27:23,210 --> 00:27:27,950
libraries that everybody uses the same

583
00:27:24,859 --> 00:27:31,009
abbreviation for it which is PD so

584
00:27:27,950 --> 00:27:33,620
you'll find that one of the things I've

585
00:27:31,009 --> 00:27:36,220
got here is from fast AI imports import

586
00:27:33,619 --> 00:27:41,509
star okay

587
00:27:36,220 --> 00:27:44,839
the faster I imports module has nothing

588
00:27:41,509 --> 00:27:50,990
but imports of a bunch of hopefully

589
00:27:44,839 --> 00:27:53,599
useful tools so all of the code for

590
00:27:50,990 --> 00:27:56,059
first AI is inside the fast a I

591
00:27:53,599 --> 00:28:02,719
directory inside the first AI repo and

592
00:27:56,059 --> 00:28:04,190
so you can have a look at imports and

593
00:28:02,720 --> 00:28:08,240
you'll see it's just literally a list of

594
00:28:04,190 --> 00:28:11,059
inputs and you're fine there pandas as

595
00:28:08,240 --> 00:28:13,309
PD and so everybody does this right so

596
00:28:11,059 --> 00:28:14,690
you'll see lots of people using PD dot

597
00:28:13,309 --> 00:28:20,299
something they're always talking about

598
00:28:14,690 --> 00:28:24,860
pandas so pandas lets us read a CSV file

599
00:28:20,299 --> 00:28:28,369
and so when we read the CSV file we just

600
00:28:24,859 --> 00:28:31,279
tell it the path to the CSV file a list

601
00:28:28,369 --> 00:28:33,079
of any columns that contain dates and I

602
00:28:31,279 --> 00:28:35,450
always add this low-memory equals false

603
00:28:33,079 --> 00:28:37,069
that's going to actually make it read

604
00:28:35,450 --> 00:28:41,539
more of the file to decide what the

605
00:28:37,069 --> 00:28:44,779
types are this here is something called

606
00:28:41,539 --> 00:28:48,230
a Python 3.6 format string it's one of

607
00:28:44,779 --> 00:28:50,000
the coolest parts of python 3.6

608
00:28:48,230 --> 00:28:51,620
you've probably used lots of different

609
00:28:50,000 --> 00:28:53,569
ways in the past in Python of

610
00:28:51,619 --> 00:28:57,649
interpolating variables into your

611
00:28:53,569 --> 00:28:58,909
strings python 3.6 has a very simple way

612
00:28:57,650 --> 00:29:00,560
that you'll probably always want to use

613
00:28:58,910 --> 00:29:03,110
from now on and it's you to create a

614
00:29:00,559 --> 00:29:08,139
normal string you type an F for the

615
00:29:03,109 --> 00:29:08,139
start and then if I define a variable

616
00:29:09,670 --> 00:29:20,730
then I can say hello

617
00:29:13,099 --> 00:29:22,529
Curly's - function okay this is kind of

618
00:29:20,730 --> 00:29:24,779
confusing these are not the same Curly's

619
00:29:22,529 --> 00:29:26,430
that we saw earlier on in that LS

620
00:29:24,779 --> 00:29:30,359
command right that LS command is

621
00:29:26,430 --> 00:29:35,220
specific to Jupiter and interpolates -

622
00:29:30,359 --> 00:29:38,189
code into shell code these Curly's are

623
00:29:35,220 --> 00:29:39,870
Python 3.6 format string Curly's they

624
00:29:38,190 --> 00:29:44,340
require an F at the start so if I get

625
00:29:39,869 --> 00:29:46,859
rid of the F it doesn't interpolate okay

626
00:29:44,339 --> 00:29:50,099
so the F tells it to interpolate and the

627
00:29:46,859 --> 00:29:52,109
cool thing is inside that Curly's you

628
00:29:50,099 --> 00:29:56,629
can write any Python code you'd like

629
00:29:52,109 --> 00:30:01,799
just about so for example name dot Papa

630
00:29:56,630 --> 00:30:05,010
hello Jeremy okay so I use this all the

631
00:30:01,799 --> 00:30:06,659
time and it doesn't matter because it's

632
00:30:05,009 --> 00:30:11,970
a format string it doesn't matter if the

633
00:30:06,660 --> 00:30:14,610
thing was I always forget my age I think

634
00:30:11,970 --> 00:30:16,019
I'm 43 it doesn't matter if it's an

635
00:30:14,609 --> 00:30:17,759
integer right normally if you like to do

636
00:30:16,019 --> 00:30:23,279
string concatenation with integers place

637
00:30:17,759 --> 00:30:28,140
and complains no such problem here okay

638
00:30:23,279 --> 00:30:30,899
so so this is going to read path slash

639
00:30:28,140 --> 00:30:36,180
train dot CSV into a thing called a data

640
00:30:30,900 --> 00:30:38,940
frame pandas data frames and hours data

641
00:30:36,180 --> 00:30:41,670
frames are kind of pretty similar so if

642
00:30:38,940 --> 00:30:44,039
you've used R before then you'll find

643
00:30:41,670 --> 00:30:53,400
that this is a you know reasonably

644
00:30:44,039 --> 00:31:00,109
comfortable so this file is nine point

645
00:30:53,400 --> 00:31:06,420
three Meg and it's size is sorry 112 Meg

646
00:31:00,109 --> 00:31:11,059
112 Nick and it has 400,000 rows in it

647
00:31:06,420 --> 00:31:11,060
okay so it takes a moment to import it

648
00:31:13,009 --> 00:31:26,910
but what it's done we can type the name

649
00:31:22,740 --> 00:31:28,740
of the data frame DF raw and then use

650
00:31:26,910 --> 00:31:31,500
various methods on it so for example

651
00:31:28,740 --> 00:31:35,190
deer fur or tail will show us the last

652
00:31:31,500 --> 00:31:36,660
few rows of the data frame by default

653
00:31:35,190 --> 00:31:38,700
it's going to show the columns along the

654
00:31:36,660 --> 00:31:41,009
top and the rows down the side but in

655
00:31:38,700 --> 00:31:43,860
this case there's a lot of columns so

656
00:31:41,009 --> 00:31:46,799
I've just said dot transpose to show it

657
00:31:43,859 --> 00:31:48,809
the other way around

658
00:31:46,799 --> 00:31:51,389
I've created one extra function here

659
00:31:48,809 --> 00:31:53,839
display all normally if you just type DF

660
00:31:51,390 --> 00:31:56,130
R or if it's too big to show

661
00:31:53,839 --> 00:31:58,980
conveniently it truncates it and put

662
00:31:56,130 --> 00:32:00,360
little ipsus in the middle so the

663
00:31:58,980 --> 00:32:02,069
details don't matter but this is just

664
00:32:00,359 --> 00:32:03,899
changing your couple of settings to say

665
00:32:02,069 --> 00:32:06,029
even if it's got a thousand rows in a

666
00:32:03,900 --> 00:32:09,210
thousand columns please still show the

667
00:32:06,029 --> 00:32:10,589
whole thing okay so this is finished I

668
00:32:09,210 --> 00:32:13,470
can actually show you that so if I just

669
00:32:10,589 --> 00:32:15,509
type this is really cool in in Jupiter

670
00:32:13,470 --> 00:32:19,170
notebook you can type a variable with

671
00:32:15,509 --> 00:32:21,599
almost any kind a video HTML an image

672
00:32:19,170 --> 00:32:23,279
whatever and it'll generally figure out

673
00:32:21,599 --> 00:32:24,629
a way of displaying it for you okay so

674
00:32:23,279 --> 00:32:26,789
in this case it's a panda's data frame

675
00:32:24,630 --> 00:32:29,790
it picks it out a way of just playing it

676
00:32:26,789 --> 00:32:31,740
for me and so you can see here that by

677
00:32:29,789 --> 00:32:36,509
default it's actually doesn't show me

678
00:32:31,740 --> 00:32:40,140
the whole thing so so here's the data

679
00:32:36,509 --> 00:32:42,329
set we've got a few different rows this

680
00:32:40,140 --> 00:32:45,570
is the last bit the tail of it alright

681
00:32:42,329 --> 00:32:49,470
last few rows this is the thing we want

682
00:32:45,569 --> 00:32:51,059
to predict price okay and then all of

683
00:32:49,470 --> 00:32:53,670
the other we call this the dependent

684
00:32:51,059 --> 00:32:56,490
variable the dependent variable is the

685
00:32:53,670 --> 00:32:58,620
price and then we got a whole bunch of

686
00:32:56,490 --> 00:33:02,099
things we could predict it with and when

687
00:32:58,619 --> 00:33:05,329
I start with a data set I tend yes

688
00:33:02,099 --> 00:33:05,329
Terrance how can I give you this

689
00:33:08,298 --> 00:33:14,970
hello Jeremy hi Tara I've read in books

690
00:33:13,349 --> 00:33:16,740
that you should never look at the data

691
00:33:14,970 --> 00:33:19,470
because of the risk of overfit why do

692
00:33:16,740 --> 00:33:21,960
you start by looking at the data yeah so

693
00:33:19,470 --> 00:33:24,929
I think she's gonna mention I actually

694
00:33:21,960 --> 00:33:26,279
kind of don't like I I want to find out

695
00:33:24,929 --> 00:33:28,919
at least enough to know that I've like

696
00:33:26,279 --> 00:33:31,910
managed to imported okay but I tend not

697
00:33:28,919 --> 00:33:34,080
to really study it at all at this point

698
00:33:31,910 --> 00:33:36,360
because I don't want to make too many

699
00:33:34,079 --> 00:33:39,569
assumptions about it I would actually

700
00:33:36,359 --> 00:33:41,490
say most books say the opposite most

701
00:33:39,569 --> 00:33:43,649
books do a whole lot of expediate

702
00:33:41,490 --> 00:33:50,460
exploratory data analysis first

703
00:33:43,650 --> 00:33:52,590
yeah academic books say that that's one

704
00:33:50,460 --> 00:33:53,970
of the biggest risks of everything but

705
00:33:52,589 --> 00:33:56,250
the practical books say let's do some

706
00:33:53,970 --> 00:33:57,750
EDA first yeah so that the truth is kind

707
00:33:56,250 --> 00:33:59,460
of somewhere in between and I generally

708
00:33:57,750 --> 00:34:00,419
I generally try to do machine learning

709
00:33:59,460 --> 00:34:01,350
driven EDA

710
00:34:00,419 --> 00:34:08,639
and that's what we're going to learn

711
00:34:01,349 --> 00:34:11,608
today okay so the do thing I do care

712
00:34:08,639 --> 00:34:13,980
about though is what's the purpose of

713
00:34:11,608 --> 00:34:16,529
the project and for capital projects the

714
00:34:13,980 --> 00:34:18,510
purpose is very easy we can just look

715
00:34:16,530 --> 00:34:20,700
and find out there's always an

716
00:34:18,510 --> 00:34:23,580
evaluation section how is it evaluated

717
00:34:20,699 --> 00:34:27,329
and this is evaluated on root mean

718
00:34:23,579 --> 00:34:28,500
squared log error so this means they're

719
00:34:27,329 --> 00:34:30,929
going to look at the difference between

720
00:34:28,500 --> 00:34:33,869
the log of our prediction of price and

721
00:34:30,929 --> 00:34:35,929
the log of the actual price and then

722
00:34:33,869 --> 00:34:37,079
they're going to square it and addemup

723
00:34:35,929 --> 00:34:39,659
okay

724
00:34:37,079 --> 00:34:42,059
so because they're going to be focusing

725
00:34:39,659 --> 00:34:44,309
on the difference of the logs that means

726
00:34:42,059 --> 00:34:46,710
that we should focus on the logs as well

727
00:34:44,309 --> 00:34:49,199
and this is pretty common like for a

728
00:34:46,710 --> 00:34:51,510
price generally you care not so much

729
00:34:49,199 --> 00:34:53,638
about did I miss by ten dollars but did

730
00:34:51,510 --> 00:34:55,260
I miss by ten percent right so if it was

731
00:34:53,639 --> 00:34:56,700
a million dollar thing and you're a

732
00:34:55,260 --> 00:34:57,990
hundred thousand dollars off or if

733
00:34:56,699 --> 00:35:00,029
you're it's a ten thousand dollar thing

734
00:34:57,989 --> 00:35:01,679
and you're a thousand dollars off often

735
00:35:00,030 --> 00:35:05,390
we would consider those equivalent scale

736
00:35:01,679 --> 00:35:08,099
issues and so for this oxygen problem

737
00:35:05,389 --> 00:35:11,159
the organizers are telling us they care

738
00:35:08,099 --> 00:35:13,949
about ratios more than differences and

739
00:35:11,159 --> 00:35:16,549
so the log is the thing we care about so

740
00:35:13,949 --> 00:35:19,299
the first thing I do is to take the log

741
00:35:16,550 --> 00:35:22,240
okay now NP

742
00:35:19,300 --> 00:35:24,460
is numpy I'm assuming that you have some

743
00:35:22,239 --> 00:35:26,500
familiarity with numpy if you don't

744
00:35:24,460 --> 00:35:28,480
we've got a video called deep learning

745
00:35:26,500 --> 00:35:30,190
workshop which actually isn't just for

746
00:35:28,480 --> 00:35:32,289
deep learning it's Rahal it's basically

747
00:35:30,190 --> 00:35:34,360
for this as well and one of the parts

748
00:35:32,289 --> 00:35:36,250
there which we've got a time coded link

749
00:35:34,360 --> 00:35:39,130
to there's a quick introduction to numb

750
00:35:36,250 --> 00:35:41,860
pay but basically numpy lets us treat

751
00:35:39,130 --> 00:35:45,070
arrays matrices vectors high dimensional

752
00:35:41,860 --> 00:35:47,620
chances as if they're Python variables

753
00:35:45,070 --> 00:35:51,730
and we can do stuff like log to them and

754
00:35:47,619 --> 00:35:54,819
it'll apply it to everything numpy and

755
00:35:51,730 --> 00:35:58,030
pandas work together very nicely so in

756
00:35:54,820 --> 00:36:01,440
this case DF fraud sale price is pulling

757
00:35:58,030 --> 00:36:11,500
a column out of a panda's data frame

758
00:36:01,440 --> 00:36:13,240
which gives us a pandas series right

759
00:36:11,500 --> 00:36:18,760
shows us the sale prices and their

760
00:36:13,239 --> 00:36:22,179
indexes right and a series can be passed

761
00:36:18,760 --> 00:36:24,010
to a number I function okay which is

762
00:36:22,179 --> 00:36:27,399
pretty handy and so you can see here

763
00:36:24,010 --> 00:36:31,690
this is how I can replace a column with

764
00:36:27,400 --> 00:36:33,519
a new column pretty easy so okay now

765
00:36:31,690 --> 00:36:35,559
that we've replaced its sale price with

766
00:36:33,519 --> 00:36:37,239
its log we can go ahead and try to

767
00:36:35,559 --> 00:36:40,750
create a random forest

768
00:36:37,239 --> 00:36:44,459
what's a random forest we'll find out in

769
00:36:40,750 --> 00:36:47,170
detail but in brief a random forest is a

770
00:36:44,460 --> 00:36:49,720
kind of universal machine learning

771
00:36:47,170 --> 00:36:52,240
technique it's a way of predicting

772
00:36:49,719 --> 00:36:55,359
something that can be of any kind it

773
00:36:52,239 --> 00:36:57,789
could be a category like is it a dog or

774
00:36:55,360 --> 00:37:02,230
a cat or it could be a continuous

775
00:36:57,789 --> 00:37:04,809
function you aspera like price it can

776
00:37:02,230 --> 00:37:10,389
predict it with columns of pretty much

777
00:37:04,809 --> 00:37:15,789
any kind pixel data zip codes revenues

778
00:37:10,389 --> 00:37:18,159
whatever in general it doesn't overfit

779
00:37:15,789 --> 00:37:20,650
it can and will learn to check whether

780
00:37:18,159 --> 00:37:22,569
it is but it doesn't generally overfit

781
00:37:20,650 --> 00:37:25,660
too badly and it's very very easy to

782
00:37:22,570 --> 00:37:26,800
make to stop it from overfitting you

783
00:37:25,659 --> 00:37:28,119
don't need and we'll talk more about

784
00:37:26,800 --> 00:37:30,820
this you don't need a separate

785
00:37:28,119 --> 00:37:31,779
validation set in general it can tell

786
00:37:30,820 --> 00:37:33,670
you how well it

787
00:37:31,780 --> 00:37:37,570
generalizes even if you only have one

788
00:37:33,670 --> 00:37:39,430
data set it has few if any statistical

789
00:37:37,570 --> 00:37:41,890
assumptions it doesn't assume that your

790
00:37:39,429 --> 00:37:43,509
data is normally distributed it doesn't

791
00:37:41,889 --> 00:37:45,639
assume that the relationship so linear

792
00:37:43,510 --> 00:37:49,500
it doesn't assume that you've just

793
00:37:45,639 --> 00:37:53,469
specified the interactions it requires

794
00:37:49,500 --> 00:37:55,389
very few pieces of feature engineering

795
00:37:53,469 --> 00:37:56,769
for many different types of situation

796
00:37:55,389 --> 00:37:58,389
you don't have to take the log of the

797
00:37:56,769 --> 00:38:00,329
data you don't have to multiply

798
00:37:58,389 --> 00:38:03,460
interactions together so in other words

799
00:38:00,329 --> 00:38:06,699
it's a great place to start right if

800
00:38:03,460 --> 00:38:08,699
your first random forest does very

801
00:38:06,699 --> 00:38:10,839
little useful then that's a sign that

802
00:38:08,699 --> 00:38:12,339
there might be problems with your data

803
00:38:10,840 --> 00:38:14,050
like it's designed to work pretty much

804
00:38:12,340 --> 00:38:16,809
first off can you please throw it out or

805
00:38:14,050 --> 00:38:20,310
towards this gentleman thank you what

806
00:38:16,809 --> 00:38:22,929
about the national year and of course

807
00:38:20,309 --> 00:38:25,029
yeah great question so there's this

808
00:38:22,929 --> 00:38:26,679
concept of curse of dimensionality in

809
00:38:25,030 --> 00:38:29,200
fact there's two concepts I'll touch on

810
00:38:26,679 --> 00:38:31,419
curse of dimensionality and the low free

811
00:38:29,199 --> 00:38:33,689
lunch theorem these are two concepts you

812
00:38:31,420 --> 00:38:37,000
often hear a lot about

813
00:38:33,690 --> 00:38:41,769
they're both largely meaningless and

814
00:38:37,000 --> 00:38:43,329
basically stupid and yet I would say

815
00:38:41,769 --> 00:38:45,969
maybe the majority of people in the

816
00:38:43,329 --> 00:38:47,380
field not only don't know that but think

817
00:38:45,969 --> 00:38:49,179
the opposite so it's well worth

818
00:38:47,380 --> 00:38:51,760
explaining the curse of dimensionality

819
00:38:49,179 --> 00:38:55,059
is this idea that the more columns you

820
00:38:51,760 --> 00:38:57,460
have it basically creates a space that's

821
00:38:55,059 --> 00:39:00,369
more and more empty and this is kind of

822
00:38:57,460 --> 00:39:03,190
fascinating mathematical idea which is

823
00:39:00,369 --> 00:39:04,960
the more dimensions you have the more

824
00:39:03,190 --> 00:39:06,909
all of the points sit on the edge of

825
00:39:04,960 --> 00:39:10,059
that space alright so if you've just got

826
00:39:06,909 --> 00:39:11,980
a single dimension where things are like

827
00:39:10,059 --> 00:39:15,009
random then they're spread out all over

828
00:39:11,980 --> 00:39:16,210
right where else if it's a square then

829
00:39:15,010 --> 00:39:17,740
the probability that they're in the

830
00:39:16,210 --> 00:39:20,019
middle means that they've kind of been

831
00:39:17,739 --> 00:39:21,399
on the edge of either dimension so it's

832
00:39:20,019 --> 00:39:23,710
a little bit less likely that they're

833
00:39:21,400 --> 00:39:26,590
not on the edge edge dimension you add

834
00:39:23,710 --> 00:39:28,659
it becomes more addictive ly less likely

835
00:39:26,590 --> 00:39:30,579
that the point isn't on the edge of at

836
00:39:28,659 --> 00:39:32,589
least one dimension right and so

837
00:39:30,579 --> 00:39:35,230
basically in high dimensions everything

838
00:39:32,590 --> 00:39:36,910
sits on the edge and what that means in

839
00:39:35,230 --> 00:39:40,150
theory is that the distance between

840
00:39:36,909 --> 00:39:43,599
points is much less meaningful and so if

841
00:39:40,150 --> 00:39:45,079
we assume that somehow that matters that

842
00:39:43,599 --> 00:39:48,769
it would suggest that when you've got

843
00:39:45,079 --> 00:39:50,690
lots of columns and you just use them

844
00:39:48,769 --> 00:39:52,340
without being very careful to remove the

845
00:39:50,690 --> 00:39:56,240
ones you don't care about that somehow

846
00:39:52,340 --> 00:39:59,450
things won't work that turns out just

847
00:39:56,239 --> 00:40:02,359
not to be the case it's not the case for

848
00:39:59,449 --> 00:40:04,639
a number of reasons one is that the

849
00:40:02,360 --> 00:40:06,230
points still do have different distances

850
00:40:04,639 --> 00:40:08,029
away from each other just because

851
00:40:06,230 --> 00:40:10,130
they're on the edge they still do vary

852
00:40:08,030 --> 00:40:12,110
and far where they are from each other

853
00:40:10,130 --> 00:40:14,000
and so this point is more similar at

854
00:40:12,110 --> 00:40:15,740
this point that it is to that point so

855
00:40:14,000 --> 00:40:17,840
even things will learn about K nearest

856
00:40:15,739 --> 00:40:19,939
neighbors actually work really well

857
00:40:17,840 --> 00:40:22,280
really really well in high dimensions

858
00:40:19,940 --> 00:40:24,289
despite what the theoreticians claimed

859
00:40:22,280 --> 00:40:29,290
and what really happened here was that

860
00:40:24,289 --> 00:40:32,059
in the 90s theory totally took over

861
00:40:29,289 --> 00:40:33,409
machine learning and so particularly

862
00:40:32,059 --> 00:40:34,940
there was this concept of these things

863
00:40:33,409 --> 00:40:36,730
called support vector machines that were

864
00:40:34,940 --> 00:40:38,809
theoretically very well justified

865
00:40:36,730 --> 00:40:41,750
extremely easy to analyze mathematically

866
00:40:38,809 --> 00:40:44,179
and you could like kind of prove things

867
00:40:41,750 --> 00:40:46,519
about them and we kind of lost a decade

868
00:40:44,179 --> 00:40:48,799
of real practical development in my

869
00:40:46,519 --> 00:40:50,599
opinion and all these theories became

870
00:40:48,800 --> 00:40:54,140
very popular like the curse of

871
00:40:50,599 --> 00:40:56,110
dimensionality nowadays and a lot of

872
00:40:54,139 --> 00:40:58,429
theoreticians hate this and the the

873
00:40:56,110 --> 00:41:00,019
world of machine learning has become

874
00:40:58,429 --> 00:41:01,849
very empirical which is like which

875
00:41:00,019 --> 00:41:04,219
techniques actually work and it turns

876
00:41:01,849 --> 00:41:06,319
out that in practice building models on

877
00:41:04,219 --> 00:41:09,769
lots and lots of columns works really

878
00:41:06,320 --> 00:41:11,809
really well so yeah the other thing to

879
00:41:09,769 --> 00:41:14,119
quickly mention is the no free lunch

880
00:41:11,809 --> 00:41:16,880
theorem there's a mathematical theorem

881
00:41:14,119 --> 00:41:20,630
by that name that you will often hear

882
00:41:16,880 --> 00:41:24,349
about their claims that there is no type

883
00:41:20,630 --> 00:41:28,250
of model that works well for any kind of

884
00:41:24,349 --> 00:41:29,839
data set which is true and is obviously

885
00:41:28,250 --> 00:41:33,500
true if you think about it in the

886
00:41:29,840 --> 00:41:36,200
mathematical sense any random data set

887
00:41:33,500 --> 00:41:37,579
by definition is random right so there

888
00:41:36,199 --> 00:41:39,980
isn't going to be some way of looking at

889
00:41:37,579 --> 00:41:41,659
every possible random data set that's in

890
00:41:39,980 --> 00:41:44,420
some way more useful than any other

891
00:41:41,659 --> 00:41:47,299
approach in the real world we look at

892
00:41:44,420 --> 00:41:49,010
data which is not random mathematically

893
00:41:47,300 --> 00:41:51,050
we would say it sits on some lower

894
00:41:49,010 --> 00:41:54,740
dimensional manifold it was created by

895
00:41:51,050 --> 00:41:57,030
some kind of caused all structure there

896
00:41:54,739 --> 00:41:59,129
are some relationships in there

897
00:41:57,030 --> 00:42:01,710
so the truth is that we're not using

898
00:41:59,130 --> 00:42:03,750
random datasets and so the truth is in

899
00:42:01,710 --> 00:42:06,240
the real world there are actually

900
00:42:03,750 --> 00:42:08,190
techniques that work much better than

901
00:42:06,239 --> 00:42:11,669
other techniques for nearly all of the

902
00:42:08,190 --> 00:42:14,369
datasets you look at and nowadays there

903
00:42:11,670 --> 00:42:16,889
are empirical researchers who spend a

904
00:42:14,369 --> 00:42:21,140
lot of time studying this which is which

905
00:42:16,889 --> 00:42:23,338
techniques work a lot of the time and

906
00:42:21,139 --> 00:42:27,179
ensembles of decision trees with which

907
00:42:23,338 --> 00:42:28,710
random for a one is perhaps the

908
00:42:27,179 --> 00:42:32,058
technique which most often comes at the

909
00:42:28,710 --> 00:42:34,409
top and that is despite the fact that

910
00:42:32,059 --> 00:42:36,119
until the library that we're showing you

911
00:42:34,409 --> 00:42:37,500
today first day I came along there

912
00:42:36,119 --> 00:42:40,048
wasn't really any standard way to

913
00:42:37,500 --> 00:42:43,289
pre-process them properly and to

914
00:42:40,048 --> 00:42:48,239
properly set their parameters so I think

915
00:42:43,289 --> 00:42:49,500
it's even more strong than that so yeah

916
00:42:48,239 --> 00:42:52,048
I think this is where the difference

917
00:42:49,500 --> 00:42:56,548
between theory and practice is is is

918
00:42:52,048 --> 00:42:58,769
huge so when I try to create a ratso

919
00:42:56,548 --> 00:43:01,739
random forest regressor what is that

920
00:42:58,769 --> 00:43:04,349
random forest regressor okay it's part

921
00:43:01,739 --> 00:43:06,929
of something called SK learn SK learn is

922
00:43:04,349 --> 00:43:09,780
scikit-learn it is by far the most

923
00:43:06,929 --> 00:43:11,519
popular and important package for

924
00:43:09,780 --> 00:43:14,700
machine learning in python it does

925
00:43:11,519 --> 00:43:16,349
nearly everything it's not the best at

926
00:43:14,699 --> 00:43:19,649
nearly everything but it's perfectly

927
00:43:16,349 --> 00:43:21,568
good at nearly everything so like you

928
00:43:19,650 --> 00:43:22,980
might find in the next part of this

929
00:43:21,568 --> 00:43:24,298
course with your net you're going to

930
00:43:22,980 --> 00:43:25,980
look at a different kind of decision

931
00:43:24,298 --> 00:43:29,068
tree ensemble called gradient roost in

932
00:43:25,980 --> 00:43:31,858
trees where actually there's something

933
00:43:29,068 --> 00:43:34,308
called x3 boost which is better than

934
00:43:31,858 --> 00:43:36,960
gradient boosting trees in psyche alone

935
00:43:34,309 --> 00:43:39,089
but it's pretty good at everything so

936
00:43:36,960 --> 00:43:42,900
where I'm really going to focus on cycle

937
00:43:39,088 --> 00:43:45,000
in random forests you can do two kinds

938
00:43:42,900 --> 00:43:49,769
of things with a random forest if I hit

939
00:43:45,000 --> 00:43:51,449
tab I haven't imported it so let's go

940
00:43:49,769 --> 00:43:57,590
back to where we import

941
00:43:51,449 --> 00:44:01,230
[Music]

942
00:43:57,590 --> 00:44:02,700
so you can hit tab in Jupiter notebook

943
00:44:01,230 --> 00:44:05,789
to get tab-completion for anything

944
00:44:02,699 --> 00:44:07,019
that's in your environment you'll see

945
00:44:05,789 --> 00:44:10,710
that there's also a random forest

946
00:44:07,019 --> 00:44:13,349
classifier so in general there's an

947
00:44:10,710 --> 00:44:15,539
important distinction between things

948
00:44:13,349 --> 00:44:18,029
which can predict continuous variables

949
00:44:15,539 --> 00:44:19,559
that's called regression and therefore a

950
00:44:18,030 --> 00:44:22,519
method for doing that would be a

951
00:44:19,559 --> 00:44:25,980
regresar and things that predict

952
00:44:22,519 --> 00:44:28,199
categorical variables and that is called

953
00:44:25,980 --> 00:44:30,780
classification and the things that do

954
00:44:28,199 --> 00:44:32,219
that are called plasa fires now so in

955
00:44:30,780 --> 00:44:33,269
our case we're trying to predict a

956
00:44:32,219 --> 00:44:35,519
continuous variable

957
00:44:33,269 --> 00:44:37,860
pres so therefore we are doing

958
00:44:35,519 --> 00:44:41,369
regression and therefore we need a

959
00:44:37,860 --> 00:44:43,470
regress or a lot of people incorrectly

960
00:44:41,369 --> 00:44:46,469
use the word regression to refer to

961
00:44:43,469 --> 00:44:48,839
linear regression now it is just not at

962
00:44:46,469 --> 00:44:50,669
all true or appropriate regression means

963
00:44:48,840 --> 00:44:52,140
an assumed learning model that's trying

964
00:44:50,670 --> 00:44:55,110
to predict some kind of continuous

965
00:44:52,139 --> 00:44:57,069
outcome it has a continuous dependent

966
00:44:55,110 --> 00:44:58,450
variable

967
00:44:57,070 --> 00:45:00,580
so pretty much everything in

968
00:44:58,449 --> 00:45:02,348
scikit-learn has the same form you first

969
00:45:00,579 --> 00:45:04,150
of all create an instance of an object

970
00:45:02,349 --> 00:45:07,980
for the machine learning model you want

971
00:45:04,150 --> 00:45:10,180
you then call fit passing in the

972
00:45:07,980 --> 00:45:11,920
independent variables the things you're

973
00:45:10,179 --> 00:45:13,149
gonna use to predict and the dependent

974
00:45:11,920 --> 00:45:15,039
variable the thing that you want to

975
00:45:13,150 --> 00:45:22,119
predict so in our case the dependent

976
00:45:15,039 --> 00:45:25,179
variable is is the data frames sale

977
00:45:22,119 --> 00:45:27,039
price column and so we the thing we want

978
00:45:25,179 --> 00:45:31,239
to use to predict is everything except

979
00:45:27,039 --> 00:45:33,489
that in pandas the drop method returns a

980
00:45:31,239 --> 00:45:36,909
new data frame with a list of columns

981
00:45:33,489 --> 00:45:39,489
removed right well a list of rows or

982
00:45:36,909 --> 00:45:41,858
columns removed so access equals 1 means

983
00:45:39,489 --> 00:45:43,959
removed columns so this here is the data

984
00:45:41,858 --> 00:45:58,500
frame containing everything except for

985
00:45:43,960 --> 00:46:01,750
sale price okay so you just pass a list

986
00:45:58,500 --> 00:46:06,309
let's find out so to find out I could

987
00:46:01,750 --> 00:46:08,199
hit shift tab and that will bring up the

988
00:46:06,309 --> 00:46:09,880
you know a quick inspection of the

989
00:46:08,199 --> 00:46:12,848
parameters in this case it doesn't quite

990
00:46:09,880 --> 00:46:15,970
tell me what I want so if I hit shift

991
00:46:12,849 --> 00:46:18,640
tab twice it gives me a bit more

992
00:46:15,969 --> 00:46:21,338
information yes and that tells me it's a

993
00:46:18,639 --> 00:46:23,469
single label or list like list like

994
00:46:21,338 --> 00:46:25,119
means like anything you can index in

995
00:46:23,469 --> 00:46:28,118
Python there's lots of things by the way

996
00:46:25,119 --> 00:46:30,039
if I hit three times it will give me a

997
00:46:28,119 --> 00:46:33,730
whole little window at the bottom okay

998
00:46:30,039 --> 00:46:35,108
so that was shift tab another way of

999
00:46:33,730 --> 00:46:37,780
doing that of course which we learned

1000
00:46:35,108 --> 00:46:45,819
would be question mark question mark DF

1001
00:46:37,780 --> 00:46:47,170
bra drop okay sorry question mark

1002
00:46:45,820 --> 00:46:51,070
question mark would be the source code

1003
00:46:47,170 --> 00:46:53,710
for it for a single question mark is the

1004
00:46:51,070 --> 00:46:56,830
documentation

1005
00:46:53,710 --> 00:46:59,650
so I think that trick of like tab

1006
00:46:56,829 --> 00:47:01,119
complete shift-tab parameters question

1007
00:46:59,650 --> 00:47:03,190
mark and double question mark for the

1008
00:47:01,119 --> 00:47:05,769
docs and the source code like if you

1009
00:47:03,190 --> 00:47:08,170
know nothing else about using Python

1010
00:47:05,769 --> 00:47:11,769
libraries know that because now you know

1011
00:47:08,170 --> 00:47:15,090
how to find out everything else okay so

1012
00:47:11,769 --> 00:47:18,519
we try to run it and it doesn't work

1013
00:47:15,090 --> 00:47:22,240
okay so why didn't it work so anytime

1014
00:47:18,519 --> 00:47:24,219
you get a stack trace like this so an

1015
00:47:22,239 --> 00:47:25,929
error the trick is to go to the bottom

1016
00:47:24,219 --> 00:47:28,329
because the bottom tells you what went

1017
00:47:25,929 --> 00:47:29,889
wrong a buffer it tells you all of the

1018
00:47:28,329 --> 00:47:32,500
functions the court other function could

1019
00:47:29,889 --> 00:47:35,319
cause other functions to get there could

1020
00:47:32,500 --> 00:47:38,829
not convert string to float conventional

1021
00:47:35,320 --> 00:47:40,990
so there was a column name sorry a there

1022
00:47:38,829 --> 00:47:42,940
was a value rather inside my data set

1023
00:47:40,989 --> 00:47:44,589
conventional the word conventional and

1024
00:47:42,940 --> 00:47:49,210
it didn't know how to create a model

1025
00:47:44,590 --> 00:47:52,720
using that string now that's true we

1026
00:47:49,210 --> 00:47:56,110
have to pass numbers to most machine

1027
00:47:52,719 --> 00:47:57,879
learning models and certainly to random

1028
00:47:56,110 --> 00:48:03,190
forests so step one is to convert

1029
00:47:57,880 --> 00:48:05,890
everything into numbers so our data set

1030
00:48:03,190 --> 00:48:08,769
contains both continuous variables so

1031
00:48:05,889 --> 00:48:14,199
numbers where the meaning is numeric

1032
00:48:08,769 --> 00:48:16,840
like price and it contains categorical

1033
00:48:14,199 --> 00:48:19,480
variables which could either be numbers

1034
00:48:16,840 --> 00:48:22,930
where the meaning is not continuous like

1035
00:48:19,480 --> 00:48:25,869
zip code or it could be a string like

1036
00:48:22,929 --> 00:48:28,779
large small and medium it's a

1037
00:48:25,869 --> 00:48:30,699
categorical and continuous variables we

1038
00:48:28,780 --> 00:48:32,920
want to basically get to a point where

1039
00:48:30,699 --> 00:48:34,089
we have a data set where we can use all

1040
00:48:32,920 --> 00:48:36,280
of these variables so they have to all

1041
00:48:34,090 --> 00:48:38,980
be numeric and they have to be usable in

1042
00:48:36,280 --> 00:48:43,630
some way so one issue is that we've got

1043
00:48:38,980 --> 00:48:45,460
something called say all date which you

1044
00:48:43,630 --> 00:48:46,900
might remember right at the top we told

1045
00:48:45,460 --> 00:48:49,900
it that that's a date so it's been

1046
00:48:46,900 --> 00:48:52,420
passed as a date and so you can see here

1047
00:48:49,900 --> 00:48:57,160
it's Dana type D type very important

1048
00:48:52,420 --> 00:49:00,909
thing data type is date/time 64-bit so

1049
00:48:57,159 --> 00:49:02,049
that's not a number right and this is

1050
00:49:00,909 --> 00:49:03,940
actually where we need to do our first

1051
00:49:02,050 --> 00:49:06,760
piece of feature engineering right

1052
00:49:03,940 --> 00:49:08,059
inside a date there's a lot of

1053
00:49:06,760 --> 00:49:10,430
interesting

1054
00:49:08,059 --> 00:49:11,989
all right so since you've got the catch

1055
00:49:10,429 --> 00:49:14,690
box can you tell me what are some of the

1056
00:49:11,989 --> 00:49:20,739
interesting bits of information inside a

1057
00:49:14,690 --> 00:49:23,720
date what we can see like a time series

1058
00:49:20,739 --> 00:49:25,519
that's true I'm hadn't expressed for

1059
00:49:23,719 --> 00:49:27,289
real what are some columns that we could

1060
00:49:25,519 --> 00:49:32,210
pull out of this

1061
00:49:27,289 --> 00:49:33,500
yeah month the date as in like it come

1062
00:49:32,210 --> 00:49:36,920
Ian at least to be a number

1063
00:49:33,500 --> 00:49:38,690
yeah month quarter you're a pleasure to

1064
00:49:36,920 --> 00:49:41,090
your right and get some more behind you

1065
00:49:38,690 --> 00:49:46,070
just pass it to your right you go you

1066
00:49:41,090 --> 00:49:49,250
got some more columns for us the day of

1067
00:49:46,070 --> 00:49:59,870
month yeah keep going to the right yeah

1068
00:49:49,250 --> 00:50:01,909
week 30 of week yeah week of here yeah

1069
00:49:59,869 --> 00:50:03,289
okay I'll give you a few more like that

1070
00:50:01,909 --> 00:50:10,250
you might want to think about would be

1071
00:50:03,289 --> 00:50:13,039
like is it a holiday is it a weekend was

1072
00:50:10,250 --> 00:50:16,699
it raining that day was there a sports

1073
00:50:13,039 --> 00:50:18,469
event that day like it depends a bit on

1074
00:50:16,699 --> 00:50:23,839
what you're doing right so like if

1075
00:50:18,469 --> 00:50:25,759
you're predicting soda sales in soma you

1076
00:50:23,840 --> 00:50:27,710
would probably want to know was there a

1077
00:50:25,760 --> 00:50:30,830
San Francisco Giants ball game on that

1078
00:50:27,710 --> 00:50:32,480
day right so like what's in a date is

1079
00:50:30,829 --> 00:50:34,429
one of the most important pieces of

1080
00:50:32,480 --> 00:50:37,550
feature engineering you can do and no

1081
00:50:34,429 --> 00:50:39,710
machine learning algorithm can tell you

1082
00:50:37,550 --> 00:50:42,260
whether the Giants were playing that day

1083
00:50:39,710 --> 00:50:43,699
and that it was important right so this

1084
00:50:42,260 --> 00:50:47,630
is where you need to do feature

1085
00:50:43,699 --> 00:50:50,899
engineering so I to as much things as

1086
00:50:47,630 --> 00:50:53,090
many things automatically as I can for

1087
00:50:50,900 --> 00:50:58,309
you right so here I've got something

1088
00:50:53,090 --> 00:51:01,150
called add date pad what is that it's

1089
00:50:58,309 --> 00:51:05,420
something inside fast AI dot structured

1090
00:51:01,150 --> 00:51:09,590
okay and what is it well let's read the

1091
00:51:05,420 --> 00:51:13,430
source code here it is so you'll find

1092
00:51:09,590 --> 00:51:15,500
most of my functions are less than half

1093
00:51:13,429 --> 00:51:17,059
a page of code alright so here is

1094
00:51:15,500 --> 00:51:18,860
something it's going to so rather than

1095
00:51:17,059 --> 00:51:20,360
often rather than having Docs I'm going

1096
00:51:18,860 --> 00:51:21,280
to try to add Doc's over time but that

1097
00:51:20,360 --> 00:51:22,390
is their design

1098
00:51:21,280 --> 00:51:24,130
you can understand them I reading the

1099
00:51:22,389 --> 00:51:27,039
code so we're passing in a data frame

1100
00:51:24,130 --> 00:51:31,150
and the name of some field okay which in

1101
00:51:27,039 --> 00:51:33,880
this case was sale date and so in this

1102
00:51:31,150 --> 00:51:35,950
case we can't go D F dot field name

1103
00:51:33,880 --> 00:51:39,039
because that would actually find a field

1104
00:51:35,949 --> 00:51:41,469
called field name it literally so DF

1105
00:51:39,039 --> 00:51:43,329
square bracket field name is how we grab

1106
00:51:41,469 --> 00:51:44,259
a column where that column name is

1107
00:51:43,329 --> 00:51:46,059
stored in this variable

1108
00:51:44,260 --> 00:51:49,090
okay so we've now got the field itself

1109
00:51:46,059 --> 00:51:51,130
the series yeah and so what we're going

1110
00:51:49,090 --> 00:51:53,920
to do is we're going to go through all

1111
00:51:51,130 --> 00:51:56,530
of these different strings right and

1112
00:51:53,920 --> 00:52:00,269
this is a piece of Python which actually

1113
00:51:56,530 --> 00:52:02,710
looks inside an object and finds a

1114
00:52:00,269 --> 00:52:04,539
attribute with that name so this is

1115
00:52:02,710 --> 00:52:05,829
going to go through and you can again

1116
00:52:04,539 --> 00:52:08,050
you can google for Pais and get

1117
00:52:05,829 --> 00:52:09,940
attribute it's a cool little advanced

1118
00:52:08,050 --> 00:52:11,200
technique but this is going to go

1119
00:52:09,940 --> 00:52:14,889
through it's going to find for this

1120
00:52:11,199 --> 00:52:17,949
field it's going to find its Year

1121
00:52:14,889 --> 00:52:19,569
attribute now planter's has got this

1122
00:52:17,949 --> 00:52:23,859
interesting idea which is if I actually

1123
00:52:19,570 --> 00:52:25,210
look inside let's go field equals this

1124
00:52:23,860 --> 00:52:27,519
is the kind of experiment I want you to

1125
00:52:25,210 --> 00:52:29,349
do right play around say all date okay

1126
00:52:27,519 --> 00:52:32,530
so I've now got that in a field object

1127
00:52:29,349 --> 00:52:37,299
and so I can go field right and I can go

1128
00:52:32,530 --> 00:52:40,840
field dot tab okay and let's see is year

1129
00:52:37,300 --> 00:52:43,330
in there oh it's not okay why not

1130
00:52:40,840 --> 00:52:46,780
well that's because year is only going

1131
00:52:43,329 --> 00:52:47,559
to apply to pandas series that date time

1132
00:52:46,780 --> 00:52:50,320
objects

1133
00:52:47,559 --> 00:52:53,289
so what pandas does is it lets out

1134
00:52:50,320 --> 00:52:55,090
different methods inside attributes that

1135
00:52:53,289 --> 00:52:58,259
are specific to what they are so

1136
00:52:55,090 --> 00:53:02,350
date/time objects will have a DT

1137
00:52:58,260 --> 00:53:03,940
attribute defined and at that is where

1138
00:53:02,349 --> 00:53:08,529
you'll find all the date/time specific

1139
00:53:03,940 --> 00:53:10,659
stuff so what I went through was I went

1140
00:53:08,530 --> 00:53:11,710
through all of these and picked out all

1141
00:53:10,659 --> 00:53:13,599
of the ones that could ever be

1142
00:53:11,710 --> 00:53:15,280
interesting for having any reason right

1143
00:53:13,599 --> 00:53:17,619
and this is like the opposite of the

1144
00:53:15,280 --> 00:53:20,260
curse of dimensionality it's like if

1145
00:53:17,619 --> 00:53:21,609
there is any column or any variant of

1146
00:53:20,260 --> 00:53:23,890
that column that could be ever be

1147
00:53:21,610 --> 00:53:26,019
interesting at all add that to your data

1148
00:53:23,889 --> 00:53:28,989
set and every variation of it you can

1149
00:53:26,019 --> 00:53:32,079
think of there's no harm in adding more

1150
00:53:28,989 --> 00:53:34,539
columns nearly all the time right so in

1151
00:53:32,079 --> 00:53:37,569
this case we're going to go ahead and

1152
00:53:34,539 --> 00:53:39,608
all of these different attributes and so

1153
00:53:37,570 --> 00:53:45,039
for every one I'm going to create a new

1154
00:53:39,608 --> 00:53:47,559
field that's going to be called the name

1155
00:53:45,039 --> 00:53:50,590
of your field with the word date removed

1156
00:53:47,559 --> 00:53:52,358
sort of a sale and then the name of the

1157
00:53:50,590 --> 00:53:54,430
attribute so we're going to get a sale

1158
00:53:52,358 --> 00:53:57,429
year sale months so a week say all day

1159
00:53:54,429 --> 00:54:00,639
etc etc okay and then at the very end

1160
00:53:57,429 --> 00:54:03,819
I'm going to remove the original field

1161
00:54:00,639 --> 00:54:04,929
right because remember we can't use say

1162
00:54:03,820 --> 00:54:07,230
all date directly because it's not a

1163
00:54:04,929 --> 00:54:07,230
number

1164
00:54:12,039 --> 00:54:16,210
so your sickness only worked because it

1165
00:54:13,929 --> 00:54:17,589
was a date type did you make the data it

1166
00:54:16,210 --> 00:54:20,619
was already saved as one in the original

1167
00:54:17,590 --> 00:54:23,680
yeah it's already a date type and the

1168
00:54:20,619 --> 00:54:28,239
reason it was a date tonight is because

1169
00:54:23,679 --> 00:54:30,609
when we imported it we said PA's dates

1170
00:54:28,239 --> 00:54:32,559
equals and told pandas it's a date type

1171
00:54:30,610 --> 00:54:36,010
so as long as it looks

1172
00:54:32,559 --> 00:54:39,269
date-ish and we tell it to parse it as a

1173
00:54:36,010 --> 00:54:39,270
date if you don't have an intranet

1174
00:54:45,199 --> 00:54:49,909
i I think there might be but for some

1175
00:54:47,960 --> 00:54:51,980
reason it wasn't ideal like maybe it

1176
00:54:49,909 --> 00:54:55,159
took lots of time or it didn't always

1177
00:54:51,980 --> 00:54:56,210
work or for some reason I had to list it

1178
00:54:55,159 --> 00:54:58,250
here

1179
00:54:56,210 --> 00:55:00,949
I would suggest checking out the docs

1180
00:54:58,250 --> 00:55:02,239
for pandas don't read CSV and maybe on

1181
00:55:00,949 --> 00:55:06,009
the forum you can tell us what you find

1182
00:55:02,239 --> 00:55:06,009
because I can't remember offhand

1183
00:55:08,420 --> 00:55:14,568
you

1184
00:55:10,159 --> 00:55:21,019
I got telephoning so how about the time

1185
00:55:14,568 --> 00:55:22,788
zone let's do that one on the same forum

1186
00:55:21,019 --> 00:55:24,170
thread that savanah creates because I

1187
00:55:22,789 --> 00:55:27,200
think it's a reasonably advanced

1188
00:55:24,170 --> 00:55:29,180
question but generally speaking the time

1189
00:55:27,199 --> 00:55:31,669
zone in a properly formatted date will

1190
00:55:29,179 --> 00:55:33,259
be included in the string and it should

1191
00:55:31,670 --> 00:55:35,420
format it it should pull it out

1192
00:55:33,260 --> 00:55:37,520
correctly and turn it into a universal

1193
00:55:35,420 --> 00:55:43,068
time zone so generally speaking it

1194
00:55:37,519 --> 00:55:46,309
should handle it for you so I noticed

1195
00:55:43,068 --> 00:55:53,048
you for indexing a column to shrink when

1196
00:55:46,309 --> 00:55:55,990
we use the is there any consideration

1197
00:55:53,048 --> 00:55:58,190
the square brackets one is safer

1198
00:55:55,989 --> 00:56:01,098
particularly if you're assigning to a

1199
00:55:58,190 --> 00:56:02,539
column if it didn't already exist you

1200
00:56:01,099 --> 00:56:04,849
need to use the square brackets format

1201
00:56:02,539 --> 00:56:07,160
otherwise you'll get weird errors so the

1202
00:56:04,849 --> 00:56:09,109
square brackets format is sofa the dart

1203
00:56:07,159 --> 00:56:11,179
version saves me like a couple of

1204
00:56:09,108 --> 00:56:11,650
keystrokes so I probably use it more

1205
00:56:11,179 --> 00:56:17,389
than I should

1206
00:56:11,650 --> 00:56:20,119
in this particular case because I wanted

1207
00:56:17,389 --> 00:56:22,969
to grab something that was had field

1208
00:56:20,119 --> 00:56:24,528
name was had something inside it wasn't

1209
00:56:22,969 --> 00:56:27,169
the name itself I have to use square

1210
00:56:24,528 --> 00:56:32,150
brackets so square brackets is going to

1211
00:56:27,170 --> 00:56:39,260
be your your safe bet if in doubt so

1212
00:56:32,150 --> 00:56:42,349
after I run that you'll notice that DF r

1213
00:56:39,260 --> 00:56:45,380
or dark columns gives me a list of all

1214
00:56:42,349 --> 00:56:47,930
of the columns just as strings and at

1215
00:56:45,380 --> 00:56:49,548
the end there they all are right so it's

1216
00:56:47,929 --> 00:56:53,899
removed sale date and it's added all

1217
00:56:49,548 --> 00:56:56,298
those so that's not quite enough the

1218
00:56:53,900 --> 00:57:02,599
other problem is that we've got a whole

1219
00:56:56,298 --> 00:57:03,409
bunch of strings in there right so you

1220
00:57:02,599 --> 00:57:05,740
can just think that they're doing to

1221
00:57:03,409 --> 00:57:05,739
pass a bet

1222
00:57:09,969 --> 00:57:20,349
so is like low high medium thank you so

1223
00:57:18,039 --> 00:57:23,230
a panda's actually has a concept with a

1224
00:57:20,349 --> 00:57:25,150
category data type but by default it

1225
00:57:23,230 --> 00:57:27,250
doesn't turn anything into a category

1226
00:57:25,150 --> 00:57:33,220
for you so I've created something called

1227
00:57:27,250 --> 00:57:35,289
Train cats which creates categorical

1228
00:57:33,219 --> 00:57:37,809
variables for everything that's the

1229
00:57:35,289 --> 00:57:40,119
string okay and so what that's going to

1230
00:57:37,809 --> 00:57:42,009
do is behind the scenes it's going to

1231
00:57:40,119 --> 00:57:44,199
create a column that's actually a number

1232
00:57:42,010 --> 00:57:47,140
right as an integer and it's going to

1233
00:57:44,199 --> 00:57:49,719
store a mapping from the integers to the

1234
00:57:47,139 --> 00:57:52,029
streets okay

1235
00:57:49,719 --> 00:57:54,639
the reason it's trained cats as it uses

1236
00:57:52,030 --> 00:57:56,200
for the training set more advanced usage

1237
00:57:54,639 --> 00:57:58,239
is that when we get to looking at the

1238
00:57:56,199 --> 00:58:02,439
test and validation sets this is really

1239
00:57:58,239 --> 00:58:04,299
important idea in fact Terrence came to

1240
00:58:02,440 --> 00:58:07,030
me the other day and he said my models

1241
00:58:04,300 --> 00:58:09,039
not working why not and he figured it

1242
00:58:07,030 --> 00:58:11,110
out for himself it turned out the reason

1243
00:58:09,039 --> 00:58:12,940
why was because the mappings he was

1244
00:58:11,110 --> 00:58:14,680
using from string to number in the

1245
00:58:12,940 --> 00:58:16,119
training set were different to the

1246
00:58:14,679 --> 00:58:18,669
mappings he was using from string to

1247
00:58:16,119 --> 00:58:21,460
number in the test set so therefore in

1248
00:58:18,670 --> 00:58:23,980
the training set hi might have been

1249
00:58:21,460 --> 00:58:26,260
three but in the trait test set it might

1250
00:58:23,980 --> 00:58:28,960
have been two so the two were totally

1251
00:58:26,260 --> 00:58:31,570
different and so the model was basically

1252
00:58:28,960 --> 00:58:37,269
non predictive okay so I have another

1253
00:58:31,570 --> 00:58:39,640
function called apply categories where

1254
00:58:37,269 --> 00:58:42,909
you can pass in your existing training

1255
00:58:39,639 --> 00:58:44,230
set and it all use the same mappings to

1256
00:58:42,909 --> 00:58:45,759
let you all make sure your test set of

1257
00:58:44,230 --> 00:58:48,550
validation set uses the same mappings

1258
00:58:45,760 --> 00:58:50,590
okay so when I go trained cats it's

1259
00:58:48,550 --> 00:58:53,350
actually not going to make the data

1260
00:58:50,590 --> 00:58:54,820
frame look different at all but behind

1261
00:58:53,349 --> 00:59:04,769
the scenes it's going to turn them all

1262
00:58:54,820 --> 00:59:04,769
into numbers when we finish at 12 11:50

1263
00:59:08,969 --> 00:59:13,719
let's see here we go I'll try to finish

1264
00:59:11,050 --> 00:59:15,039
on time so you'll see now remember I

1265
00:59:13,719 --> 00:59:16,869
mentioned there was this dot DT

1266
00:59:15,039 --> 00:59:18,550
attribute that gives you access to

1267
00:59:16,869 --> 00:59:20,409
everything assuming it's a date time

1268
00:59:18,550 --> 00:59:21,820
about the date time there's a dot count

1269
00:59:20,409 --> 00:59:22,839
attribute that gives you access to

1270
00:59:21,820 --> 00:59:25,210
things as

1271
00:59:22,840 --> 00:59:28,030
something's a category all right and so

1272
00:59:25,210 --> 00:59:29,619
usage banned was a string and so now

1273
00:59:28,030 --> 00:59:33,250
that I've run train cats it's turned it

1274
00:59:29,619 --> 00:59:37,509
into a category so I can go to your or

1275
00:59:33,250 --> 00:59:38,710
usage banned cat right and there's a

1276
00:59:37,510 --> 00:59:40,330
whole bunch of other things we've got

1277
00:59:38,710 --> 00:59:42,340
there okay

1278
00:59:40,329 --> 00:59:44,139
so one of the things we've got there is

1279
00:59:42,340 --> 00:59:47,140
dot categories and you can see here is

1280
00:59:44,139 --> 00:59:49,089
the list now one of the things you might

1281
00:59:47,139 --> 00:59:52,690
notice it's that this list is in a bit

1282
00:59:49,090 --> 00:59:55,870
of a weird order high low medium the

1283
00:59:52,690 --> 00:59:57,309
truth is it doesn't matter too much but

1284
00:59:55,869 --> 00:59:59,049
what's going to happen when we use the

1285
00:59:57,309 --> 01:00:00,699
random forest is it's actually good that

1286
00:59:59,050 --> 01:00:02,650
this is going to be 0 this is going to

1287
01:00:00,699 --> 01:00:04,059
be 1 this is gonna be true and we're

1288
01:00:02,650 --> 01:00:05,619
going to be creating decision trees and

1289
01:00:04,059 --> 01:00:07,539
so we're going to have a decision tree

1290
01:00:05,619 --> 01:00:10,630
that can split things at a single point

1291
01:00:07,539 --> 01:00:13,480
so it either be high versus low and

1292
01:00:10,630 --> 01:00:15,820
medium or medium versus high and low

1293
01:00:13,480 --> 01:00:17,500
that would be kind of weird right it

1294
01:00:15,820 --> 01:00:19,720
actually turns out not to work too badly

1295
01:00:17,500 --> 01:00:22,059
but it'll work a little bit better if

1296
01:00:19,719 --> 01:00:23,739
you have these in sensible orders okay

1297
01:00:22,059 --> 01:00:26,920
so if you want to reorder a category

1298
01:00:23,739 --> 01:00:30,189
then you can just go caps net categories

1299
01:00:26,920 --> 01:00:32,619
and pass in the order you want until it

1300
01:00:30,190 --> 01:00:37,269
is ordered and almost every pandas

1301
01:00:32,619 --> 01:00:39,039
method has an in-place parameter which

1302
01:00:37,269 --> 01:00:41,650
rather than returning a new data frame

1303
01:00:39,039 --> 01:00:43,210
is going to change that data frame okay

1304
01:00:41,650 --> 01:00:44,590
so I'm not going to do that like I

1305
01:00:43,210 --> 01:00:45,970
didn't check that carefully for

1306
01:00:44,590 --> 01:00:49,740
categories it should be ordered but this

1307
01:00:45,969 --> 01:00:49,739
seems like a pretty obvious one

1308
01:00:52,650 --> 01:00:58,860
you reiterate that issue I don't

1309
01:00:54,690 --> 01:01:06,059
understand what the chart so um the

1310
01:00:58,860 --> 01:01:13,650
usage banned column it's actually going

1311
01:01:06,059 --> 01:01:16,110
to be this is actually what I random

1312
01:01:13,650 --> 01:01:17,130
forest is gonna see these numbers one

1313
01:01:16,110 --> 01:01:19,019
zero two one

1314
01:01:17,130 --> 01:01:20,940
okay and they map to the position in

1315
01:01:19,019 --> 01:01:23,099
this array and as we're going to learn

1316
01:01:20,940 --> 01:01:24,960
shortly a random forest consists of a

1317
01:01:23,099 --> 01:01:27,539
bunch of trees it's going to make a

1318
01:01:24,960 --> 01:01:29,400
single split and the single split is

1319
01:01:27,539 --> 01:01:32,639
going to be either greater than or less

1320
01:01:29,400 --> 01:01:36,619
than 1 or greater than a less than two

1321
01:01:32,639 --> 01:01:39,420
right so we could split it into high

1322
01:01:36,619 --> 01:01:41,099
versus low and medium which that

1323
01:01:39,420 --> 01:01:44,010
semantically makes sense it's like is it

1324
01:01:41,099 --> 01:01:47,219
big or we could split it into medium

1325
01:01:44,010 --> 01:01:50,070
versus high and low it doesn't make much

1326
01:01:47,219 --> 01:01:52,019
sense right so in practice the decision

1327
01:01:50,070 --> 01:01:54,210
tree could then make a second split to

1328
01:01:52,019 --> 01:01:55,469
say like medium versus high and low and

1329
01:01:54,210 --> 01:01:58,079
then within the high and low into high

1330
01:01:55,469 --> 01:02:00,750
and low but by putting it in a sensible

1331
01:01:58,079 --> 01:02:03,420
order if it wants to spit out low it can

1332
01:02:00,750 --> 01:02:05,010
do it in one decision rather than two

1333
01:02:03,420 --> 01:02:08,610
and we'll be learning more about this

1334
01:02:05,010 --> 01:02:09,900
shortly it's it honestly it's not a big

1335
01:02:08,610 --> 01:02:13,110
deal but I just wanted to mention it's

1336
01:02:09,900 --> 01:02:15,180
there and it's also good to know that

1337
01:02:13,110 --> 01:02:17,269
people when they talk about like

1338
01:02:15,179 --> 01:02:18,989
different types of categorical variable

1339
01:02:17,269 --> 01:02:20,460
specifically you need to know there's a

1340
01:02:18,989 --> 01:02:22,409
kind of categorical variable called

1341
01:02:20,460 --> 01:02:24,179
ordinal and an ordinal categorical

1342
01:02:22,409 --> 01:02:27,750
variable is one that has some kind of

1343
01:02:24,179 --> 01:02:30,529
order like high medium and low okay and

1344
01:02:27,750 --> 01:02:34,710
random forests are terribly sensitive

1345
01:02:30,530 --> 01:02:39,750
for that fact but it's worth noting it's

1346
01:02:34,710 --> 01:02:42,539
there and trying it out still ordering

1347
01:02:39,750 --> 01:02:43,650
wouldn't sell for maximum that that's

1348
01:02:42,539 --> 01:02:45,480
what I'm saying it helps a little bit

1349
01:02:43,650 --> 01:02:48,530
right it means you can get there with

1350
01:02:45,480 --> 01:02:48,530
one decision rather than two

1351
01:02:48,590 --> 01:02:53,930
I noticed there is a negative one in

1352
01:02:51,590 --> 01:02:57,980
that list of categories is that like an

1353
01:02:53,929 --> 01:03:00,289
NA yeah exactly so for free we get a

1354
01:02:57,980 --> 01:03:02,119
negative one which prefers to missing

1355
01:03:00,289 --> 01:03:03,440
and what are the things we're going to

1356
01:03:02,119 --> 01:03:04,909
do is we're going to actually add one

1357
01:03:03,440 --> 01:03:06,679
can somebody pass the vector Paul is

1358
01:03:04,909 --> 01:03:10,730
we're going to add one to our codes

1359
01:03:06,679 --> 01:03:14,539
maybe in two guys let people know it's

1360
01:03:10,730 --> 01:03:16,429
coming yeah so let people know we're

1361
01:03:14,539 --> 01:03:34,550
going to add one to all of our codes to

1362
01:03:16,429 --> 01:03:37,219
make missing a zero later on yeah we're

1363
01:03:34,550 --> 01:03:38,330
going to get to that yeah yeah so get

1364
01:03:37,219 --> 01:03:39,500
dummies which we'll get to in a moment

1365
01:03:38,329 --> 01:03:42,110
is going to create three separate

1366
01:03:39,500 --> 01:03:43,429
columns ones and zeros for high once

1367
01:03:42,110 --> 01:03:45,110
there's a million ones in series for low

1368
01:03:43,429 --> 01:03:49,419
where else this one creates a single

1369
01:03:45,110 --> 01:03:49,420
column with an integer zero one or two

1370
01:03:49,900 --> 01:03:52,369
we're going to get to that one shortly

1371
01:03:51,800 --> 01:03:54,110
yep

1372
01:03:52,369 --> 01:03:58,670
did you have a question to Paul or just

1373
01:03:54,110 --> 01:04:01,550
pointing out okay okay so at this point

1374
01:03:58,670 --> 01:04:04,730
as long as we always make sure we use

1375
01:04:01,550 --> 01:04:07,880
dot cat codes the thing with the numbers

1376
01:04:04,730 --> 01:04:09,199
in we're basically done all of our

1377
01:04:07,880 --> 01:04:11,000
streams have been turned into numbers

1378
01:04:09,199 --> 01:04:12,949
dates been turned into a bunch of

1379
01:04:11,000 --> 01:04:16,789
numeric columns and everything else is

1380
01:04:12,949 --> 01:04:19,069
already a number okay the only other

1381
01:04:16,789 --> 01:04:21,949
main thing we have to do is notice that

1382
01:04:19,070 --> 01:04:25,130
we have lots of missing values so here

1383
01:04:21,949 --> 01:04:27,589
is DFA is null that's going to return

1384
01:04:25,130 --> 01:04:32,780
true or false depending on whether

1385
01:04:27,590 --> 01:04:35,800
something is empty dot some is going to

1386
01:04:32,780 --> 01:04:37,910
add up how many empty for each series

1387
01:04:35,800 --> 01:04:41,030
and then I'm going to sort them and

1388
01:04:37,909 --> 01:04:44,269
divide by the size of the data set so

1389
01:04:41,030 --> 01:04:47,280
here we have some things which have like

1390
01:04:44,269 --> 01:04:51,519
quite high percentages of

1391
01:04:47,280 --> 01:04:59,320
Nantz sir so missing values we call them

1392
01:04:51,519 --> 01:05:10,239
in play or what I call it maybe I didn't

1393
01:04:59,320 --> 01:05:11,650
run it there we go okay so we're going

1394
01:05:10,239 --> 01:05:13,329
to get to that in a moment but I will

1395
01:05:11,650 --> 01:05:16,750
point something out which is reading the

1396
01:05:13,329 --> 01:05:19,059
CSV talk a minute or so the processing

1397
01:05:16,750 --> 01:05:20,380
took another ten seconds or so from time

1398
01:05:19,059 --> 01:05:21,699
to time when I've done a little bit of

1399
01:05:20,380 --> 01:05:24,160
work I don't want to wait for again I

1400
01:05:21,699 --> 01:05:25,599
will tend to save where I'm at so here

1401
01:05:24,159 --> 01:05:27,399
I'm going to save it and I got to save

1402
01:05:25,599 --> 01:05:29,589
it in a format called feather format

1403
01:05:27,400 --> 01:05:30,610
this is very very new all right but what

1404
01:05:29,590 --> 01:05:32,920
this is going to do is it's going to

1405
01:05:30,610 --> 01:05:34,809
save it to disk in exactly the same

1406
01:05:32,920 --> 01:05:37,599
basic format but it's actually in RAM

1407
01:05:34,809 --> 01:05:39,130
this is by far the fastest way to save

1408
01:05:37,599 --> 01:05:41,019
something in the fastest way to read it

1409
01:05:39,130 --> 01:05:43,930
back right so most of the folks you deal

1410
01:05:41,019 --> 01:05:45,369
with unless they're on the cutting edge

1411
01:05:43,929 --> 01:05:46,449
won't be familiar with this format so

1412
01:05:45,369 --> 01:05:48,369
this would be something you can teach

1413
01:05:46,449 --> 01:05:51,339
them about it's becoming the standard

1414
01:05:48,369 --> 01:05:52,989
right it's actually becoming something

1415
01:05:51,340 --> 01:05:58,570
that's going to be used not just in

1416
01:05:52,989 --> 01:06:00,429
pandas but in Java in spark in lots of

1417
01:05:58,570 --> 01:06:02,620
like things for like communicating

1418
01:06:00,429 --> 01:06:05,349
across computers because it's incredibly

1419
01:06:02,619 --> 01:06:06,880
fast and it's actually co-designed by

1420
01:06:05,349 --> 01:06:10,329
the guy that made Panthers by where's

1421
01:06:06,880 --> 01:06:15,190
McKinney so we can just go deer 4.2

1422
01:06:10,329 --> 01:06:18,069
feather and pass in some name I tend to

1423
01:06:15,190 --> 01:06:22,090
have a folder called temp for all of my

1424
01:06:18,070 --> 01:06:24,190
like as I'm going along stuff and so

1425
01:06:22,090 --> 01:06:26,950
when you go OS don't make do as you can

1426
01:06:24,190 --> 01:06:28,170
pass in any path path here you like it

1427
01:06:26,949 --> 01:06:30,730
won't complain if it's already there

1428
01:06:28,170 --> 01:06:32,650
exists okay equals true if there are

1429
01:06:30,730 --> 01:06:34,599
some sub directories it'll create them

1430
01:06:32,650 --> 01:06:41,110
for you so this is a super handy little

1431
01:06:34,599 --> 01:06:44,529
function okay so it's not installed so

1432
01:06:41,110 --> 01:06:46,930
because I'm using Kressel for the first

1433
01:06:44,530 --> 01:06:48,400
time it's complaining about that so if

1434
01:06:46,929 --> 01:06:51,129
you get a message that something's not

1435
01:06:48,400 --> 01:06:54,190
installed if you're using anaconda you

1436
01:06:51,130 --> 01:06:56,930
can condor install Kressel actually

1437
01:06:54,190 --> 01:06:58,990
doesn't use anaconda it uses a pit

1438
01:06:56,929 --> 01:06:58,989
you

1439
01:07:07,539 --> 01:07:18,309
and so we wait for that to go along okay

1440
01:07:10,639 --> 01:07:21,460
and so now if I run it and so sometimes

1441
01:07:18,309 --> 01:07:24,589
you may find you actually have to

1442
01:07:21,460 --> 01:07:25,818
restart Jupiter so I won't do that now

1443
01:07:24,588 --> 01:07:27,288
it's really out of time so if you

1444
01:07:25,818 --> 01:07:30,199
restart Jupiter you'll be able to keep

1445
01:07:27,289 --> 01:07:32,240
moving a lot so from now on you don't

1446
01:07:30,199 --> 01:07:34,250
have to rerun all the stuff they love

1447
01:07:32,239 --> 01:07:38,838
you could just say PD don't read further

1448
01:07:34,250 --> 01:07:42,130
and we've got our data frame back so the

1449
01:07:38,838 --> 01:07:45,199
last step we're going to do is to

1450
01:07:42,130 --> 01:07:49,010
actually replace the strings with their

1451
01:07:45,199 --> 01:07:51,318
numeric codes and we're going to pull

1452
01:07:49,010 --> 01:07:53,869
out the dependent variable sale price

1453
01:07:51,318 --> 01:07:55,969
into a separate variable and we're going

1454
01:07:53,869 --> 01:07:58,900
to also handle missing continuous values

1455
01:07:55,969 --> 01:08:02,118
and so how are we going to do that

1456
01:07:58,900 --> 01:08:08,059
so you'll see here we've got a function

1457
01:08:02,119 --> 01:08:10,250
called proc DF what is that croc DF

1458
01:08:08,059 --> 01:08:23,449
so it's in so fast AI dot structured

1459
01:08:10,250 --> 01:08:25,729
again and here it is so quite a lot of

1460
01:08:23,448 --> 01:08:27,229
the functions have a few additional

1461
01:08:25,729 --> 01:08:28,278
parameters that you can provide and

1462
01:08:27,229 --> 01:08:29,750
we'll talk about them later but

1463
01:08:28,279 --> 01:08:31,910
basically we're providing the data frame

1464
01:08:29,750 --> 01:08:35,060
to process and the name of the dependent

1465
01:08:31,909 --> 01:08:37,698
variable that the the Y field name okay

1466
01:08:35,060 --> 01:08:39,940
and so what it's going to do is it's

1467
01:08:37,698 --> 01:08:44,088
going to make a copy of the data frame

1468
01:08:39,939 --> 01:08:46,488
it's going to grab the Y value it's

1469
01:08:44,088 --> 01:08:52,149
going to drop the dependent variable

1470
01:08:46,488 --> 01:08:58,729
from the original and then it's going to

1471
01:08:52,149 --> 01:09:00,769
fix missing so how do we fix missing so

1472
01:08:58,729 --> 01:09:06,379
what we do to fix missing is pretty

1473
01:09:00,770 --> 01:09:08,779
simple if it's numeric then we fix it by

1474
01:09:06,380 --> 01:09:10,279
basically saying let's first of all

1475
01:09:08,779 --> 01:09:12,319
check that it does have some missing

1476
01:09:10,279 --> 01:09:14,630
right so if it does have some missing

1477
01:09:12,319 --> 01:09:17,179
values so in other words the is not some

1478
01:09:14,630 --> 01:09:19,250
is nonzero then we're going to create a

1479
01:09:17,179 --> 01:09:21,520
new column called with

1480
01:09:19,250 --> 01:09:23,810
name as the original plus underscore na

1481
01:09:21,520 --> 01:09:27,080
and it's going to be a bullion column

1482
01:09:23,810 --> 01:09:29,839
with a 1 anytime that was missing and a

1483
01:09:27,079 --> 01:09:31,519
0 anytime it wasn't we're going to talk

1484
01:09:29,838 --> 01:09:32,568
about this again next week but this is

1485
01:09:31,520 --> 01:09:34,609
you know give you the quick version

1486
01:09:32,569 --> 01:09:38,060
having done that where they're going to

1487
01:09:34,609 --> 01:09:38,569
replace the NA s the missing with the

1488
01:09:38,060 --> 01:09:40,548
median

1489
01:09:38,569 --> 01:09:42,620
okay so anywhere that used to be missing

1490
01:09:40,548 --> 01:09:45,409
will be replaced with the median or add

1491
01:09:42,619 --> 01:09:47,630
a new column to tell us which ones were

1492
01:09:45,409 --> 01:09:49,430
missing we only do that for numeric we

1493
01:09:47,630 --> 01:09:51,440
don't need it for categories because

1494
01:09:49,430 --> 01:09:53,359
pandas had is handles categorical

1495
01:09:51,439 --> 01:09:59,919
variables automatically by setting them

1496
01:09:53,359 --> 01:10:05,630
to minus one so what we're going to do

1497
01:09:59,920 --> 01:10:07,699
is if it's not numeric and it's a

1498
01:10:05,630 --> 01:10:09,319
categorical type we'll talk about the

1499
01:10:07,699 --> 01:10:10,789
maximum number of categories later but

1500
01:10:09,319 --> 01:10:12,199
lets us units is always true so if it's

1501
01:10:10,789 --> 01:10:15,229
not a numeric type we're going to

1502
01:10:12,199 --> 01:10:19,010
replace the column with its codes the

1503
01:10:15,229 --> 01:10:21,949
integers okay plus one right so the by

1504
01:10:19,010 --> 01:10:25,130
default pandas uses minus one for

1505
01:10:21,949 --> 01:10:27,880
missing so now zero will be missing and

1506
01:10:25,130 --> 01:10:33,560
one two three four will be all the other

1507
01:10:27,880 --> 01:10:35,659
categories so we're going to talk about

1508
01:10:33,560 --> 01:10:38,330
dummies later on in the course

1509
01:10:35,659 --> 01:10:39,559
but basically optionally you can say

1510
01:10:38,329 --> 01:10:41,300
that if you already know about dummy

1511
01:10:39,560 --> 01:10:43,490
values there are columns with a small

1512
01:10:41,300 --> 01:10:45,350
number of possible values you can put in

1513
01:10:43,489 --> 01:10:46,489
two dummies instead you can America

1514
01:10:45,350 --> 01:10:47,810
lysing them but we're not going to do

1515
01:10:46,489 --> 01:10:49,760
that for now okay

1516
01:10:47,810 --> 01:10:51,550
so for now all we're doing is we're

1517
01:10:49,760 --> 01:10:54,260
using the categorical codes plus one

1518
01:10:51,550 --> 01:10:56,480
replacing missing values with the median

1519
01:10:54,260 --> 01:10:59,119
adding an additional column telling us

1520
01:10:56,479 --> 01:11:03,819
which ones were replaced and removing

1521
01:10:59,119 --> 01:11:07,189
the dependent variable so that's what

1522
01:11:03,819 --> 01:11:10,159
proc DF does runs very quickly okay so

1523
01:11:07,189 --> 01:11:12,500
you'll see now sale price is no longer

1524
01:11:10,159 --> 01:11:14,479
here okay we've now got a whole new

1525
01:11:12,500 --> 01:11:17,659
color a whole new variable called Y the

1526
01:11:14,479 --> 01:11:20,839
contain sale press you'll see we put a

1527
01:11:17,659 --> 01:11:26,439
couple of extra blah underscore na s at

1528
01:11:20,840 --> 01:11:26,440
the end okay and if I look at that

1529
01:11:27,060 --> 01:11:32,460
[Music]

1530
01:11:28,920 --> 01:11:32,460
everything is a number

1531
01:11:32,538 --> 01:11:37,578
okay these boolean z' are treated as

1532
01:11:36,319 --> 01:11:38,988
numbers they're just considered

1533
01:11:37,578 --> 01:11:42,889
contributed a zero or one that is

1534
01:11:38,988 --> 01:11:44,359
displayed as false and true

1535
01:11:42,890 --> 01:11:45,800
they can see here is at the end of a

1536
01:11:44,359 --> 01:11:50,479
month is at the start of a month is at

1537
01:11:45,800 --> 01:11:52,130
the end of a quarter it's kind of funny

1538
01:11:50,479 --> 01:11:54,109
right because we've got things like a

1539
01:11:52,130 --> 01:11:55,850
model ID which presumably is something

1540
01:11:54,109 --> 01:11:57,409
like that could be a serial number it

1541
01:11:55,850 --> 01:11:59,030
could be like the model identifier

1542
01:11:57,409 --> 01:12:00,380
that's created by the factory or

1543
01:11:59,029 --> 01:12:03,170
something we've got like a data source

1544
01:12:00,380 --> 01:12:05,510
ID like some of these are numbers but

1545
01:12:03,170 --> 01:12:08,300
they're not continuous it turns out

1546
01:12:05,510 --> 01:12:10,310
actually random forests work fine with

1547
01:12:08,300 --> 01:12:12,380
those we'll talk about why and how and a

1548
01:12:10,310 --> 01:12:14,690
lot about that in detail but for now all

1549
01:12:12,380 --> 01:12:16,789
you need to know is no problem okay so

1550
01:12:14,689 --> 01:12:18,859
as long as this is all numbers which it

1551
01:12:16,789 --> 01:12:23,119
now is we can now go ahead and create a

1552
01:12:18,859 --> 01:12:26,239
random forest so m dot random forest

1553
01:12:23,119 --> 01:12:29,000
regressor random forests are trivially

1554
01:12:26,239 --> 01:12:31,010
paralyse abour so what that means is

1555
01:12:29,000 --> 01:12:33,380
that they if you've got more than one

1556
01:12:31,010 --> 01:12:36,350
CPU which everybody will basically on

1557
01:12:33,380 --> 01:12:39,140
their computers at home and if you've

1558
01:12:36,350 --> 01:12:41,420
got a t2 dot medium or bigger at AWS

1559
01:12:39,140 --> 01:12:43,520
you've got multiple CPUs trivially

1560
01:12:41,420 --> 01:12:46,220
paralyse Abul means that it will split

1561
01:12:43,520 --> 01:12:48,620
up the data across your different CPUs

1562
01:12:46,220 --> 01:12:51,289
and basically linearly scale right so

1563
01:12:48,619 --> 01:12:53,000
the more CPUs you have pretty much it

1564
01:12:51,289 --> 01:12:53,449
will divide the time it takes by that

1565
01:12:53,000 --> 01:12:57,140
number

1566
01:12:53,449 --> 01:12:59,000
not exactly but roughly so n jobs equals

1567
01:12:57,140 --> 01:13:01,820
minus one tells the random forest

1568
01:12:59,000 --> 01:13:03,829
regressor to create a separate job it's

1569
01:13:01,819 --> 01:13:06,289
a separate process basically for each

1570
01:13:03,829 --> 01:13:08,689
CPU you have so that's pretty much what

1571
01:13:06,289 --> 01:13:11,119
you want all the time

1572
01:13:08,689 --> 01:13:13,159
fit the model using this new data frame

1573
01:13:11,119 --> 01:13:15,949
we created using that Y value we pulled

1574
01:13:13,159 --> 01:13:17,300
out and then get the score ok the score

1575
01:13:15,949 --> 01:13:18,889
is going to be the r-squared we'll

1576
01:13:17,300 --> 01:13:20,900
define that next week hopefully some of

1577
01:13:18,890 --> 01:13:24,110
you already know about the r-squared one

1578
01:13:20,899 --> 01:13:26,149
is very good zero is very bad so as you

1579
01:13:24,109 --> 01:13:32,000
can see we've mmediately got a very high

1580
01:13:26,149 --> 01:13:33,799
score okay so that looks great but what

1581
01:13:32,000 --> 01:13:36,829
we'll talk about next week a lot more is

1582
01:13:33,800 --> 01:13:39,050
that it's not quite great because maybe

1583
01:13:36,829 --> 01:13:41,720
we had data that had points that look

1584
01:13:39,050 --> 01:13:44,119
like this and we fitted a line that

1585
01:13:41,720 --> 01:13:46,250
looks like this when actually we want to

1586
01:13:44,119 --> 01:13:48,739
want normal it looks like that ok the

1587
01:13:46,250 --> 01:13:51,170
only way to know whether we've actually

1588
01:13:48,739 --> 01:13:53,809
done a good job is by having some other

1589
01:13:51,170 --> 01:13:54,980
data set that we didn't use to train the

1590
01:13:53,810 --> 01:13:56,340
model now we're going to learn about

1591
01:13:54,979 --> 01:13:58,019
some ways with random fire

1592
01:13:56,340 --> 01:14:00,449
we can kind of get away without even

1593
01:13:58,020 --> 01:14:02,730
having that other data set but for now

1594
01:14:00,449 --> 01:14:07,170
what we're going to do is we're going to

1595
01:14:02,729 --> 01:14:08,369
split into twelve thousand rows which

1596
01:14:07,170 --> 01:14:11,010
we're going to put in a separate data

1597
01:14:08,369 --> 01:14:12,539
set called the validation set versus the

1598
01:14:11,010 --> 01:14:15,750
training sets going to take contain

1599
01:14:12,539 --> 01:14:19,649
everything else right and our data set

1600
01:14:15,750 --> 01:14:21,510
is going to be sorted by date and so

1601
01:14:19,649 --> 01:14:22,679
that means that the most recent twelve

1602
01:14:21,510 --> 01:14:24,720
thousand rows are going to be our

1603
01:14:22,680 --> 01:14:26,010
validation set again we'll talk more

1604
01:14:24,720 --> 01:14:29,070
about this next week it's a really

1605
01:14:26,010 --> 01:14:32,400
important idea but for now we can just

1606
01:14:29,069 --> 01:14:34,049
recognize that if we do that and run it

1607
01:14:32,399 --> 01:14:36,329
I've created a little thing called print

1608
01:14:34,050 --> 01:14:38,340
score and it's going to print out the

1609
01:14:36,329 --> 01:14:39,510
root mean square error between the

1610
01:14:38,340 --> 01:14:41,850
predictions and actuals

1611
01:14:39,510 --> 01:14:44,460
for the training set for the validation

1612
01:14:41,850 --> 01:14:46,620
set that r-squared for the training set

1613
01:14:44,460 --> 01:14:48,270
and the validation set and you'll see

1614
01:14:46,619 --> 01:14:51,239
that actually the r-squared for the

1615
01:14:48,270 --> 01:14:55,770
training was 0.98 but for the validation

1616
01:14:51,239 --> 01:14:57,809
was 0.89 okay then the RMS see and

1617
01:14:55,770 --> 01:15:00,840
remember this is on the logs was point

1618
01:14:57,810 --> 01:15:02,820
oh nine for the training set 0.25 for

1619
01:15:00,840 --> 01:15:05,390
the validation set now if you actually

1620
01:15:02,819 --> 01:15:08,869
go to cattle and go to the leaderboard

1621
01:15:05,390 --> 01:15:11,730
okay let's do it right now

1622
01:15:08,869 --> 01:15:15,149
he's got private and public I click on

1623
01:15:11,729 --> 01:15:17,759
public leaderboard and we can go down

1624
01:15:15,149 --> 01:15:20,489
and find out where is point two five so

1625
01:15:17,760 --> 01:15:22,880
there are four hundred seventy-five

1626
01:15:20,489 --> 01:15:22,880
teams

1627
01:15:23,430 --> 01:15:28,440
and generally speaking if you're in the

1628
01:15:26,909 --> 01:15:32,489
top half of a capital competition you're

1629
01:15:28,439 --> 01:15:34,229
doing pretty well so a point two-five

1630
01:15:32,489 --> 01:15:37,618
here we are point two five

1631
01:15:34,229 --> 01:15:43,738
what was it exactly point two five

1632
01:15:37,618 --> 01:15:46,829
by two 507 yeah about a hundred and

1633
01:15:43,738 --> 01:15:49,468
tenth so we're about in the top 25% so

1634
01:15:46,829 --> 01:15:52,260
so the idea like this is pretty cool

1635
01:15:49,469 --> 01:15:54,719
right with with like with no thinking at

1636
01:15:52,260 --> 01:15:57,179
all using the defaults of everything

1637
01:15:54,719 --> 01:16:00,289
we're in the top 25% of a caracal

1638
01:15:57,179 --> 01:16:03,630
competition so like random forests are

1639
01:16:00,289 --> 01:16:06,840
insanely powerful and this totally

1640
01:16:03,630 --> 01:16:10,800
standardized process is insanely good

1641
01:16:06,840 --> 01:16:12,840
for like any datasets so we're gonna

1642
01:16:10,800 --> 01:16:17,239
wrap up well what I'm going to ask you

1643
01:16:12,840 --> 01:16:19,319
to do for Tuesday it's like take as many

1644
01:16:17,238 --> 01:16:22,109
tackle competitions as you can whether

1645
01:16:19,319 --> 01:16:23,969
they be running now or old ones or

1646
01:16:22,109 --> 01:16:26,460
datasets that you're interested in for

1647
01:16:23,969 --> 01:16:29,939
your hobbies will work and and please

1648
01:16:26,460 --> 01:16:32,189
try it right try this process and if it

1649
01:16:29,939 --> 01:16:33,689
doesn't work you know tell us on the

1650
01:16:32,189 --> 01:16:35,939
forum here's the data so I'm using

1651
01:16:33,689 --> 01:16:37,678
here's where I got it from his like the

1652
01:16:35,939 --> 01:16:41,669
stack trace of where I got an error or

1653
01:16:37,679 --> 01:16:43,710
here's like you know if you use my print

1654
01:16:41,670 --> 01:16:46,020
score function or something like it like

1655
01:16:43,710 --> 01:16:48,329
you know show us what the training

1656
01:16:46,020 --> 01:16:49,860
versus tests it looks like we'll try and

1657
01:16:48,329 --> 01:16:52,139
figure it out right but what I'm hoping

1658
01:16:49,859 --> 01:16:55,170
we'll find is that all of you will be

1659
01:16:52,139 --> 01:16:58,230
pleasantly surprised that with with the

1660
01:16:55,170 --> 01:17:01,289
you know hour or two with information

1661
01:16:58,229 --> 01:17:04,229
you got today you can already get better

1662
01:17:01,289 --> 01:17:05,969
models than most of the very serious

1663
01:17:04,229 --> 01:17:09,178
practicing data scientists that

1664
01:17:05,969 --> 01:17:11,130
competing table competitions okay great

1665
01:17:09,179 --> 01:17:16,829
good luck and I'll see you on the forums

1666
01:17:11,130 --> 01:17:18,599
oh one more thing Friday the other class

1667
01:17:16,829 --> 01:17:20,880
said a lot of them had class during my

1668
01:17:18,599 --> 01:17:23,369
office hours so if I made them one till

1669
01:17:20,880 --> 01:17:29,159
three instead of two two or four on

1670
01:17:23,368 --> 01:17:30,779
Fridays is that okay seminar oh okay I

1671
01:17:29,158 --> 01:17:33,868
have to find a whole another time all

1672
01:17:30,779 --> 01:17:35,130
right I will talk to somebody who

1673
01:17:33,868 --> 01:17:38,250
actually knows what they're doing unlike

1674
01:17:35,130 --> 01:17:41,250
me about finding other cells

1675
01:17:38,250 --> 01:17:41,250
absolutely

